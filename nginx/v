{
    "kind": "NodeList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/nodes",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "ip-172-31-38-5",
                "selfLink": "/api/v1/nodes/ip-172-31-38-5",
                "uid": "718dcade-5c0e-496b-9330-c51bb0aa1d4a",
                "resourceVersion": "4092",
                "creationTimestamp": "2020-03-05T17:06:48Z",
                "labels": {
                    "beta.kubernetes.io/arch": "amd64",
                    "beta.kubernetes.io/os": "linux",
                    "kubernetes.io/arch": "amd64",
                    "kubernetes.io/hostname": "ip-172-31-38-5",
                    "kubernetes.io/os": "linux",
                    "microk8s.io/cluster": "true"
                },
                "annotations": {
                    "node.alpha.kubernetes.io/ttl": "0",
                    "volumes.kubernetes.io/controller-managed-attach-detach": "true"
                }
            },
            "spec": {},
            "status": {
                "capacity": {
                    "cpu": "2",
                    "ephemeral-storage": "48725632Ki",
                    "hugepages-2Mi": "0",
                    "memory": "4037948Ki",
                    "pods": "110"
                },
                "allocatable": {
                    "cpu": "2",
                    "ephemeral-storage": "47677056Ki",
                    "hugepages-2Mi": "0",
                    "memory": "3935548Ki",
                    "pods": "110"
                },
                "conditions": [
                    {
                        "type": "MemoryPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-05T17:32:56Z",
                        "lastTransitionTime": "2020-03-05T17:06:44Z",
                        "reason": "KubeletHasSufficientMemory",
                        "message": "kubelet has sufficient memory available"
                    },
                    {
                        "type": "DiskPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-05T17:32:56Z",
                        "lastTransitionTime": "2020-03-05T17:06:44Z",
                        "reason": "KubeletHasNoDiskPressure",
                        "message": "kubelet has no disk pressure"
                    },
                    {
                        "type": "PIDPressure",
                        "status": "False",
                        "lastHeartbeatTime": "2020-03-05T17:32:56Z",
                        "lastTransitionTime": "2020-03-05T17:06:44Z",
                        "reason": "KubeletHasSufficientPID",
                        "message": "kubelet has sufficient PID available"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastHeartbeatTime": "2020-03-05T17:32:56Z",
                        "lastTransitionTime": "2020-03-05T17:16:36Z",
                        "reason": "KubeletReady",
                        "message": "kubelet is posting ready status. AppArmor enabled"
                    }
                ],
                "addresses": [
                    {
                        "type": "InternalIP",
                        "address": "172.31.38.5"
                    },
                    {
                        "type": "Hostname",
                        "address": "ip-172-31-38-5"
                    }
                ],
                "daemonEndpoints": {
                    "kubeletEndpoint": {
                        "Port": 10250
                    }
                },
                "nodeInfo": {
                    "machineID": "8f73071051064a6994d1ec6eacb23b89",
                    "systemUUID": "EC25F85F-6B5B-5B6F-1DF0-6350B38141B7",
                    "bootID": "d7ff316d-faff-400b-b9cd-91fddeb2d611",
                    "kernelVersion": "4.15.0-1058-aws",
                    "osImage": "Ubuntu 18.04.4 LTS",
                    "containerRuntimeVersion": "containerd://1.2.5",
                    "kubeletVersion": "v1.17.3",
                    "kubeProxyVersion": "v1.17.3",
                    "operatingSystem": "linux",
                    "architecture": "amd64"
                },
                "images": [
                    {
                        "names": [
                            "quay.io/kubernetes-ingress-controller/nginx-ingress-controller-amd64:0.25.1"
                        ],
                        "sizeBytes": 205038326
                    },
                    {
                        "names": [
                            "quay.io/kubernetes-ingress-controller/nginx-ingress-controller@sha256:b312c91d0de688a21075078982b5e3a48b13b46eda4df743317d3059fc3ca0d9",
                            "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0"
                        ],
                        "sizeBytes": 114165218
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-grafana-amd64@sha256:4a472eb4df03f4f557d80e7c6b903d9c8fe31493108b99fbd6da6540b5448d70",
                            "k8s.gcr.io/heapster-grafana-amd64:v4.4.3"
                        ],
                        "sizeBytes": 51566280
                    },
                    {
                        "names": [
                            "docker.io/kubernetesui/dashboard@sha256:ae756074fa3d1b72c39aa98cfc6246c6923e7da3beaf350d80b91167be868871",
                            "docker.io/kubernetesui/dashboard:v2.0.0-beta5"
                        ],
                        "sizeBytes": 37866311
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-amd64@sha256:59fb34ffd902282d06fcc940a906df9787edf78651743f4c8c4abf8b3468c0e9",
                            "k8s.gcr.io/heapster-amd64:v1.5.2"
                        ],
                        "sizeBytes": 20088732
                    },
                    {
                        "names": [
                            "docker.io/kubernetesui/metrics-scraper@sha256:2026f9f7558d0f25cc6bab74ea201b4e9d5668fbc378ef64e13fddaea570efc0",
                            "docker.io/kubernetesui/metrics-scraper:v1.0.2"
                        ],
                        "sizeBytes": 16120983
                    },
                    {
                        "names": [
                            "docker.io/coredns/coredns:1.5.0"
                        ],
                        "sizeBytes": 13341835
                    },
                    {
                        "names": [
                            "docker.io/cdkbot/hostpath-provisioner-amd64@sha256:339f78eabc68ffb1656d584e41f121cb4d2b667565428c8dde836caf5b8a0228",
                            "docker.io/cdkbot/hostpath-provisioner-amd64:1.0.0"
                        ],
                        "sizeBytes": 9745308
                    },
                    {
                        "names": [
                            "docker.io/cdkbot/addon-resizer-amd64@sha256:a5ff31fb60d32e02780441fc81bc91dd549097d6afeef3c6decb6005289795af",
                            "docker.io/cdkbot/addon-resizer-amd64:1.8.1"
                        ],
                        "sizeBytes": 8343051
                    },
                    {
                        "names": [
                            "k8s.gcr.io/heapster-influxdb-amd64@sha256:f433e331c1865ad87bc5387589965528b78cd6b1b2f61697e589584d690c1edd",
                            "k8s.gcr.io/heapster-influxdb-amd64:v1.3.3"
                        ],
                        "sizeBytes": 4748077
                    },
                    {
                        "names": [
                            "k8s.gcr.io/defaultbackend-amd64@sha256:4dc5e07c8ca4e23bddb3153737d7b8c556e5fb2f29c4558b7cd6e6df99c512c7",
                            "k8s.gcr.io/defaultbackend-amd64:1.5"
                        ],
                        "sizeBytes": 1995666
                    },
                    {
                        "names": [
                            "k8s.gcr.io/pause@sha256:f78411e19d84a252e53bff71a4407a5686c46983a2c2eeed83929b888179acea",
                            "k8s.gcr.io/pause:3.1"
                        ],
                        "sizeBytes": 317164
                    }
                ]
            }
        }
    ]
}
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/events",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz.15f977e78c951605",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588-nkwbz.15f977e78c951605",
                "uid": "4517e024-7522-4396-82bc-fd4b320e464d",
                "resourceVersion": "1420",
                "creationTimestamp": "2020-03-05T17:16:20Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "apiVersion": "v1",
                "resourceVersion": "1412"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/coredns-9b8997588-nkwbz to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:16:20Z",
            "lastTimestamp": "2020-03-05T17:16:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz.15f977e83686480a",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588-nkwbz.15f977e83686480a",
                "uid": "d82b207c-97f6-4eb1-bb9a-35891265f383",
                "resourceVersion": "1431",
                "creationTimestamp": "2020-03-05T17:16:23Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "apiVersion": "v1",
                "resourceVersion": "1415",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"coredns/coredns:1.5.0\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:23Z",
            "lastTimestamp": "2020-03-05T17:16:23Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz.15f977e8ff2838dc",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588-nkwbz.15f977e8ff2838dc",
                "uid": "9210d555-49a1-45d5-9970-390727148b24",
                "resourceVersion": "1467",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "apiVersion": "v1",
                "resourceVersion": "1425",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Pulled",
            "message": "Container image \"coredns/coredns:1.5.0\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz.15f977e92d214401",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588-nkwbz.15f977e92d214401",
                "uid": "366fafeb-63e2-4350-a3f7-08f15613deb4",
                "resourceVersion": "1468",
                "creationTimestamp": "2020-03-05T17:16:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "apiVersion": "v1",
                "resourceVersion": "1425",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Created",
            "message": "Created container coredns",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:27Z",
            "lastTimestamp": "2020-03-05T17:16:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz.15f977e938485db1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588-nkwbz.15f977e938485db1",
                "uid": "18db1be9-3ee7-4223-95bc-6eb8127a65c2",
                "resourceVersion": "1469",
                "creationTimestamp": "2020-03-05T17:16:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "apiVersion": "v1",
                "resourceVersion": "1425",
                "fieldPath": "spec.containers{coredns}"
            },
            "reason": "Started",
            "message": "Started container coredns",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:27Z",
            "lastTimestamp": "2020-03-05T17:16:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns-9b8997588.15f977e78baf1c98",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns-9b8997588.15f977e78baf1c98",
                "uid": "42316bd4-a67b-4179-afb7-a6d0a1c8f2c9",
                "resourceVersion": "1419",
                "creationTimestamp": "2020-03-05T17:16:20Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "coredns-9b8997588",
                "uid": "4a3e2a49-40c7-440c-810e-25bbeb725b13",
                "apiVersion": "apps/v1",
                "resourceVersion": "1410"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: coredns-9b8997588-nkwbz",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:16:20Z",
            "lastTimestamp": "2020-03-05T17:16:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "coredns.15f977e78a1dcc53",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/coredns.15f977e78a1dcc53",
                "uid": "8c2c0958-d4e5-4eed-93ea-e2376f8cfb2d",
                "resourceVersion": "1413",
                "creationTimestamp": "2020-03-05T17:16:20Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "coredns",
                "uid": "70c2c4a2-4b28-4124-bfca-097fc9befaad",
                "apiVersion": "apps/v1",
                "resourceVersion": "1409"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set coredns-9b8997588 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:16:20Z",
            "lastTimestamp": "2020-03-05T17:16:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd.15f978060d049f81",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c-vn9dd.15f978060d049f81",
                "uid": "bd548e57-5a71-457e-9cf2-6d5ddb686e1d",
                "resourceVersion": "1843",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "apiVersion": "v1",
                "resourceVersion": "1837"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/dashboard-metrics-scraper-687667bb6c-vn9dd to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd.15f9780676c60aa8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c-vn9dd.15f9780676c60aa8",
                "uid": "3dc53998-f305-4265-a3da-f20ca813cb5f",
                "resourceVersion": "1897",
                "creationTimestamp": "2020-03-05T17:18:33Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "apiVersion": "v1",
                "resourceVersion": "1840",
                "fieldPath": "spec.containers{dashboard-metrics-scraper}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"kubernetesui/metrics-scraper:v1.0.2\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:33Z",
            "lastTimestamp": "2020-03-05T17:18:33Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd.15f978087706c878",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c-vn9dd.15f978087706c878",
                "uid": "0202194c-c4df-42dd-93bd-40d78991f12f",
                "resourceVersion": "1937",
                "creationTimestamp": "2020-03-05T17:18:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "apiVersion": "v1",
                "resourceVersion": "1840",
                "fieldPath": "spec.containers{dashboard-metrics-scraper}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"kubernetesui/metrics-scraper:v1.0.2\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:41Z",
            "lastTimestamp": "2020-03-05T17:18:41Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd.15f978087eb60ffa",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c-vn9dd.15f978087eb60ffa",
                "uid": "0db4ca1c-b04d-4b8f-ad2a-d54d5403d9bf",
                "resourceVersion": "1940",
                "creationTimestamp": "2020-03-05T17:18:41Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "apiVersion": "v1",
                "resourceVersion": "1840",
                "fieldPath": "spec.containers{dashboard-metrics-scraper}"
            },
            "reason": "Created",
            "message": "Created container dashboard-metrics-scraper",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:41Z",
            "lastTimestamp": "2020-03-05T17:18:41Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd.15f978088bb353fe",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c-vn9dd.15f978088bb353fe",
                "uid": "8817cb71-ee5f-4973-bac4-23d9ee19065a",
                "resourceVersion": "1941",
                "creationTimestamp": "2020-03-05T17:18:42Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "apiVersion": "v1",
                "resourceVersion": "1840",
                "fieldPath": "spec.containers{dashboard-metrics-scraper}"
            },
            "reason": "Started",
            "message": "Started container dashboard-metrics-scraper",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:42Z",
            "lastTimestamp": "2020-03-05T17:18:42Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c.15f978060c97d7bb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper-687667bb6c.15f978060c97d7bb",
                "uid": "e0bd5d35-6b4d-41ce-9ac3-f6121eea295a",
                "resourceVersion": "1842",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper-687667bb6c",
                "uid": "bd05b995-33ad-4dec-af0e-eeb85e39bd17",
                "apiVersion": "apps/v1",
                "resourceVersion": "1836"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: dashboard-metrics-scraper-687667bb6c-vn9dd",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper.15f978060c4fda68",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/dashboard-metrics-scraper.15f978060c4fda68",
                "uid": "7b7e4692-62a8-43d8-81e4-bdcf7471b199",
                "resourceVersion": "1839",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "dashboard-metrics-scraper",
                "uid": "c902de7b-c13e-4d61-b81e-240bf372a2a3",
                "apiVersion": "apps/v1",
                "resourceVersion": "1835"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set dashboard-metrics-scraper-687667bb6c to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f978061bf7f0a8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f978061bf7f0a8",
                "uid": "bbde4fa6-780f-49bb-9e8d-d7c87454a9f0",
                "resourceVersion": "1887",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1880"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780650ed16dd",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780650ed16dd",
                "uid": "b6af9a49-dbb1-48e5-a727-ae26248ad57d",
                "resourceVersion": "1896",
                "creationTimestamp": "2020-03-05T17:18:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"k8s.gcr.io/heapster-amd64:v1.5.2\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:32Z",
            "lastTimestamp": "2020-03-05T17:18:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f97808017715b2",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f97808017715b2",
                "uid": "cabde3f7-24d0-4877-962f-f84054b0df9a",
                "resourceVersion": "1928",
                "creationTimestamp": "2020-03-05T17:18:39Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"k8s.gcr.io/heapster-amd64:v1.5.2\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:39Z",
            "lastTimestamp": "2020-03-05T17:18:39Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780808a7698d",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780808a7698d",
                "uid": "3cdb89e7-56d1-46e0-ad15-e87914015e5b",
                "resourceVersion": "1929",
                "creationTimestamp": "2020-03-05T17:18:39Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster}"
            },
            "reason": "Created",
            "message": "Created container heapster",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:39Z",
            "lastTimestamp": "2020-03-05T17:18:39Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780812f25da0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780812f25da0",
                "uid": "5eb623ed-54ed-436b-8eb9-0db276bddbd9",
                "resourceVersion": "1930",
                "creationTimestamp": "2020-03-05T17:18:40Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster}"
            },
            "reason": "Started",
            "message": "Started container heapster",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:40Z",
            "lastTimestamp": "2020-03-05T17:18:40Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f978081308b622",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f978081308b622",
                "uid": "6d638bd6-85d5-4fea-8ad5-090a51df9bc1",
                "resourceVersion": "1931",
                "creationTimestamp": "2020-03-05T17:18:40Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/heapster-amd64:v1.5.2\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:40Z",
            "lastTimestamp": "2020-03-05T17:18:40Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f97808195f1ade",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f97808195f1ade",
                "uid": "2952f743-7d47-43df-9eea-db6ec1df4a74",
                "resourceVersion": "1932",
                "creationTimestamp": "2020-03-05T17:18:40Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer}"
            },
            "reason": "Created",
            "message": "Created container eventer",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:40Z",
            "lastTimestamp": "2020-03-05T17:18:40Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f978082324d8e0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f978082324d8e0",
                "uid": "84af47b5-72bc-4a0b-8969-e3d845597de7",
                "resourceVersion": "1933",
                "creationTimestamp": "2020-03-05T17:18:40Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer}"
            },
            "reason": "Started",
            "message": "Started container eventer",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:40Z",
            "lastTimestamp": "2020-03-05T17:18:40Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f97808232ceea1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f97808232ceea1",
                "uid": "d14a2829-23cc-45cb-800e-5e3b07a15688",
                "resourceVersion": "1934",
                "creationTimestamp": "2020-03-05T17:18:40Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster-nanny}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"cdkbot/addon-resizer-amd64:1.8.1\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:40Z",
            "lastTimestamp": "2020-03-05T17:18:40Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a0c0c43e1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a0c0c43e1",
                "uid": "02ec5959-ccaf-4234-bd02-1872545adc00",
                "resourceVersion": "1968",
                "creationTimestamp": "2020-03-05T17:18:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster-nanny}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"cdkbot/addon-resizer-amd64:1.8.1\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:48Z",
            "lastTimestamp": "2020-03-05T17:18:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a198e68f8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a198e68f8",
                "uid": "1441ae6a-75cf-4a95-8a64-4bf49af82f3f",
                "resourceVersion": "1971",
                "creationTimestamp": "2020-03-05T17:18:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster-nanny}"
            },
            "reason": "Created",
            "message": "Created container heapster-nanny",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:48Z",
            "lastTimestamp": "2020-03-05T17:18:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a254c8a29",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a254c8a29",
                "uid": "558ed4b0-cbf5-4751-af8b-6db69a12f171",
                "resourceVersion": "1972",
                "creationTimestamp": "2020-03-05T17:18:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{heapster-nanny}"
            },
            "reason": "Started",
            "message": "Started container heapster-nanny",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:48Z",
            "lastTimestamp": "2020-03-05T17:18:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a25580821",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a25580821",
                "uid": "1c2da4fe-f232-4788-8be9-2f160f419e59",
                "resourceVersion": "1973",
                "creationTimestamp": "2020-03-05T17:18:48Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer-nanny}"
            },
            "reason": "Pulled",
            "message": "Container image \"cdkbot/addon-resizer-amd64:1.8.1\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:48Z",
            "lastTimestamp": "2020-03-05T17:18:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a2f8701d9",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a2f8701d9",
                "uid": "7fdfdad3-5f2b-4e5f-b8f7-da47a9d496db",
                "resourceVersion": "1974",
                "creationTimestamp": "2020-03-05T17:18:49Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer-nanny}"
            },
            "reason": "Created",
            "message": "Created container eventer-nanny",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:49Z",
            "lastTimestamp": "2020-03-05T17:18:49Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a3d28acd4",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b-b95x9.15f9780a3d28acd4",
                "uid": "efa2ff9d-2407-4009-bc7a-6475844f631a",
                "resourceVersion": "1975",
                "creationTimestamp": "2020-03-05T17:18:49Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "apiVersion": "v1",
                "resourceVersion": "1884",
                "fieldPath": "spec.containers{eventer-nanny}"
            },
            "reason": "Started",
            "message": "Started container eventer-nanny",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:49Z",
            "lastTimestamp": "2020-03-05T17:18:49Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b.15f9780619c67002",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2-5c58f64f8b.15f9780619c67002",
                "uid": "3c21d28b-4af8-4265-8851-837fa7140c99",
                "resourceVersion": "1885",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2-5c58f64f8b",
                "uid": "037a7b4a-88f3-4b98-9b22-80d1ba02895b",
                "apiVersion": "apps/v1",
                "resourceVersion": "1879"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: heapster-v1.5.2-5c58f64f8b-b95x9",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2.15f9780619771ac3",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/heapster-v1.5.2.15f9780619771ac3",
                "uid": "fdd3e40e-16fc-4613-a492-9b26de6de90e",
                "resourceVersion": "1882",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "heapster-v1.5.2",
                "uid": "2eac381e-7255-4ff2-9fd7-bc2162b6347a",
                "apiVersion": "apps/v1",
                "resourceVersion": "1878"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set heapster-v1.5.2-5c58f64f8b to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977ebd7efb0c3",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977ebd7efb0c3",
                "uid": "4f086967-eec5-4391-bd2e-76d87826f9e5",
                "resourceVersion": "1531",
                "creationTimestamp": "2020-03-05T17:16:38Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "apiVersion": "v1",
                "resourceVersion": "1525"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/hostpath-provisioner-7b9cb5cdb4-b9xbq to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:16:38Z",
            "lastTimestamp": "2020-03-05T17:16:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977ec0cd69b8b",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977ec0cd69b8b",
                "uid": "b77a6595-fa33-4be1-9d3d-a74e421a7cae",
                "resourceVersion": "1537",
                "creationTimestamp": "2020-03-05T17:16:39Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "apiVersion": "v1",
                "resourceVersion": "1526",
                "fieldPath": "spec.containers{hostpath-provisioner}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"cdkbot/hostpath-provisioner-amd64:1.0.0\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:39Z",
            "lastTimestamp": "2020-03-05T17:16:39Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f2e92eda54",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f2e92eda54",
                "uid": "1fd1e744-2b7f-46ae-8efd-b8a93fa22010",
                "resourceVersion": "1608",
                "creationTimestamp": "2020-03-05T17:17:09Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "apiVersion": "v1",
                "resourceVersion": "1526",
                "fieldPath": "spec.containers{hostpath-provisioner}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"cdkbot/hostpath-provisioner-amd64:1.0.0\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:17:09Z",
            "lastTimestamp": "2020-03-05T17:17:09Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f2f5d1293c",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f2f5d1293c",
                "uid": "9cb62df8-128d-436c-9dfc-42f6ebc9280f",
                "resourceVersion": "1609",
                "creationTimestamp": "2020-03-05T17:17:09Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "apiVersion": "v1",
                "resourceVersion": "1526",
                "fieldPath": "spec.containers{hostpath-provisioner}"
            },
            "reason": "Created",
            "message": "Created container hostpath-provisioner",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:17:09Z",
            "lastTimestamp": "2020-03-05T17:17:09Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f300138734",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4-b9xbq.15f977f300138734",
                "uid": "3566bb4d-1554-47bf-8706-f019cdcafbe4",
                "resourceVersion": "1611",
                "creationTimestamp": "2020-03-05T17:17:09Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "apiVersion": "v1",
                "resourceVersion": "1526",
                "fieldPath": "spec.containers{hostpath-provisioner}"
            },
            "reason": "Started",
            "message": "Started container hostpath-provisioner",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:17:09Z",
            "lastTimestamp": "2020-03-05T17:17:09Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4.15f977eb99cfc372",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4.15f977eb99cfc372",
                "uid": "30d749d5-7efc-40e0-a978-e95ca1a03edd",
                "resourceVersion": "1521",
                "creationTimestamp": "2020-03-05T17:16:37Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4",
                "uid": "d47011dd-bb80-4e0d-8da7-0f2c66d7b7cc",
                "apiVersion": "apps/v1",
                "resourceVersion": "1512"
            },
            "reason": "FailedCreate",
            "message": "Error creating: pods \"hostpath-provisioner-7b9cb5cdb4-\" is forbidden: error looking up service account kube-system/microk8s-hostpath: serviceaccount \"microk8s-hostpath\" not found",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:16:37Z",
            "lastTimestamp": "2020-03-05T17:16:37Z",
            "count": 2,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4.15f977ebd7aba0b8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner-7b9cb5cdb4.15f977ebd7aba0b8",
                "uid": "421554d8-aefc-4e05-8ade-20440109af8a",
                "resourceVersion": "1528",
                "creationTimestamp": "2020-03-05T17:16:38Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "hostpath-provisioner-7b9cb5cdb4",
                "uid": "d47011dd-bb80-4e0d-8da7-0f2c66d7b7cc",
                "apiVersion": "apps/v1",
                "resourceVersion": "1516"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: hostpath-provisioner-7b9cb5cdb4-b9xbq",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:16:38Z",
            "lastTimestamp": "2020-03-05T17:16:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "hostpath-provisioner.15f977eb995a5257",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/hostpath-provisioner.15f977eb995a5257",
                "uid": "db7ec7d5-df66-4741-bc5a-46ef68c6fb42",
                "resourceVersion": "1515",
                "creationTimestamp": "2020-03-05T17:16:37Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "hostpath-provisioner",
                "uid": "9de93bda-394f-4a5f-847e-8d378081c2e7",
                "apiVersion": "apps/v1",
                "resourceVersion": "1511"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set hostpath-provisioner-7b9cb5cdb4 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:16:37Z",
            "lastTimestamp": "2020-03-05T17:16:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager.15f9776272b8824f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager.15f9776272b8824f",
                "uid": "a122d320-6dfa-4ace-b73c-d85cde756b1f",
                "resourceVersion": "36",
                "creationTimestamp": "2020-03-05T17:06:48Z"
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "kube-controller-manager",
                "uid": "f1123852-b64f-496b-a7e1-22ef6f8360a2",
                "apiVersion": "v1",
                "resourceVersion": "21"
            },
            "reason": "LeaderElection",
            "message": "ip-172-31-38-5_08fbace3-6631-4a18-8d3f-87b13c792590 became leader",
            "source": {
                "component": "kube-controller-manager"
            },
            "firstTimestamp": "2020-03-05T17:06:48Z",
            "lastTimestamp": "2020-03-05T17:06:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-controller-manager.15f9776272b8edc9",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-controller-manager.15f9776272b8edc9",
                "uid": "30ebb9eb-22c2-4fb3-a28c-9f8db1957b83",
                "resourceVersion": "43",
                "creationTimestamp": "2020-03-05T17:06:48Z"
            },
            "involvedObject": {
                "kind": "Lease",
                "namespace": "kube-system",
                "name": "kube-controller-manager",
                "uid": "40ed4db8-bbfd-4557-9e57-6e33e57d5d2b",
                "apiVersion": "coordination.k8s.io/v1",
                "resourceVersion": "27"
            },
            "reason": "LeaderElection",
            "message": "ip-172-31-38-5_08fbace3-6631-4a18-8d3f-87b13c792590 became leader",
            "source": {
                "component": "kube-controller-manager"
            },
            "firstTimestamp": "2020-03-05T17:06:48Z",
            "lastTimestamp": "2020-03-05T17:06:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler.15f9776272309be4",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler.15f9776272309be4",
                "uid": "1596a01d-855b-4ecf-83af-acd3e0c8379c",
                "resourceVersion": "34",
                "creationTimestamp": "2020-03-05T17:06:48Z"
            },
            "involvedObject": {
                "kind": "Endpoints",
                "namespace": "kube-system",
                "name": "kube-scheduler",
                "uid": "d2fd00ca-57ec-4016-9d22-98085d8167ad",
                "apiVersion": "v1",
                "resourceVersion": "22"
            },
            "reason": "LeaderElection",
            "message": "ip-172-31-38-5_636c0201-2fc2-4160-8902-0c3a701c728c became leader",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:06:48Z",
            "lastTimestamp": "2020-03-05T17:06:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kube-scheduler.15f977627230d9c0",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kube-scheduler.15f977627230d9c0",
                "uid": "8c26d458-13a5-41e7-888d-12acb4204017",
                "resourceVersion": "42",
                "creationTimestamp": "2020-03-05T17:06:48Z"
            },
            "involvedObject": {
                "kind": "Lease",
                "namespace": "kube-system",
                "name": "kube-scheduler",
                "uid": "e62c59e0-401f-42a6-9cd0-8666445178f5",
                "apiVersion": "coordination.k8s.io/v1",
                "resourceVersion": "24"
            },
            "reason": "LeaderElection",
            "message": "ip-172-31-38-5_636c0201-2fc2-4160-8902-0c3a701c728c became leader",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:06:48Z",
            "lastTimestamp": "2020-03-05T17:06:48Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc.15f9782e8a1a61e8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475-ck8cc.15f9782e8a1a61e8",
                "uid": "cf9488fc-8a27-404b-b8e1-aa8460f5466d",
                "resourceVersion": "2351",
                "creationTimestamp": "2020-03-05T17:21:25Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "apiVersion": "v1",
                "resourceVersion": "2346"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kubernetes-dashboard-5bc7684475-ck8cc to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:21:25Z",
            "lastTimestamp": "2020-03-05T17:21:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc.15f9782ebe7211e2",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475-ck8cc.15f9782ebe7211e2",
                "uid": "91266dc9-15f1-4da5-aea5-4275f1c80550",
                "resourceVersion": "2359",
                "creationTimestamp": "2020-03-05T17:21:26Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "apiVersion": "v1",
                "resourceVersion": "2347",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"kubernetesui/dashboard:v2.0.0-beta5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:21:26Z",
            "lastTimestamp": "2020-03-05T17:21:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc.15f9782efb3c73ef",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475-ck8cc.15f9782efb3c73ef",
                "uid": "001deb70-a19e-4ee6-a435-4497c46558dd",
                "resourceVersion": "2362",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "apiVersion": "v1",
                "resourceVersion": "2347",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"kubernetesui/dashboard:v2.0.0-beta5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc.15f9782f02e3965c",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475-ck8cc.15f9782f02e3965c",
                "uid": "055137a6-1d5d-427e-aca4-b6270ef9c318",
                "resourceVersion": "2363",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "apiVersion": "v1",
                "resourceVersion": "2347",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Created",
            "message": "Created container kubernetes-dashboard",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc.15f9782f0e0d7b5d",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475-ck8cc.15f9782f0e0d7b5d",
                "uid": "5ec5fe20-3ac0-4cb9-b351-123b26ab8d7e",
                "resourceVersion": "2366",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "apiVersion": "v1",
                "resourceVersion": "2347",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Started",
            "message": "Started container kubernetes-dashboard",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475.15f9782e89c02ffb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5bc7684475.15f9782e89c02ffb",
                "uid": "ef191268-2b89-4dfc-8a28-398440c626ab",
                "resourceVersion": "2350",
                "creationTimestamp": "2020-03-05T17:21:25Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5bc7684475",
                "uid": "92613ff3-a8a3-4921-8bcc-7e84e12a7732",
                "apiVersion": "apps/v1",
                "resourceVersion": "2344"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kubernetes-dashboard-5bc7684475-ck8cc",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:21:25Z",
            "lastTimestamp": "2020-03-05T17:21:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f9780609a6da1f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f9780609a6da1f",
                "uid": "1edc9c05-9cf4-469c-aa92-9ff5e76b14db",
                "resourceVersion": "1830",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1823"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/kubernetes-dashboard-5c848cc544-fxwp9 to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f978063c4dcff7",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f978063c4dcff7",
                "uid": "fd326bfd-dd85-42f9-8eb4-e1731a3cc777",
                "resourceVersion": "1891",
                "creationTimestamp": "2020-03-05T17:18:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1824",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"kubernetesui/dashboard:v2.0.0-beta5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:32Z",
            "lastTimestamp": "2020-03-05T17:18:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f97806f67e28f6",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f97806f67e28f6",
                "uid": "9548fed5-0623-429e-9f84-8fac03b0c282",
                "resourceVersion": "1902",
                "creationTimestamp": "2020-03-05T17:18:35Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1824",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"kubernetesui/dashboard:v2.0.0-beta5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:35Z",
            "lastTimestamp": "2020-03-05T17:18:35Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f978071b4a23b8",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f978071b4a23b8",
                "uid": "06cc7e07-ab78-4d55-a08c-715bffcb0ca1",
                "resourceVersion": "1905",
                "creationTimestamp": "2020-03-05T17:18:35Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1824",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Created",
            "message": "Created container kubernetes-dashboard",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:35Z",
            "lastTimestamp": "2020-03-05T17:18:35Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f9780725eebfdb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f9780725eebfdb",
                "uid": "edb614d1-09d7-4099-985e-cfb0e879941b",
                "resourceVersion": "1907",
                "creationTimestamp": "2020-03-05T17:18:36Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1824",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Started",
            "message": "Started container kubernetes-dashboard",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:36Z",
            "lastTimestamp": "2020-03-05T17:18:36Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544-fxwp9.15f9782f2183960b",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544-fxwp9.15f9782f2183960b",
                "uid": "ea25e63b-02d6-4800-921c-becb2cace68a",
                "resourceVersion": "2372",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544-fxwp9",
                "uid": "6e1a6824-b3ff-42ae-9086-da6d79ea2edc",
                "apiVersion": "v1",
                "resourceVersion": "1824",
                "fieldPath": "spec.containers{kubernetes-dashboard}"
            },
            "reason": "Killing",
            "message": "Stopping container kubernetes-dashboard",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544.15f97806096a7d84",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544.15f97806096a7d84",
                "uid": "f1339717-5256-4543-b6f0-85b97bab27d8",
                "resourceVersion": "1828",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544",
                "uid": "f9854a10-1c4f-499a-a456-c0e3875f5403",
                "apiVersion": "apps/v1",
                "resourceVersion": "1820"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: kubernetes-dashboard-5c848cc544-fxwp9",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544.15f9782f231050ae",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard-5c848cc544.15f9782f231050ae",
                "uid": "7af5f109-c5ae-4a29-aa22-288a165d9181",
                "resourceVersion": "2373",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard-5c848cc544",
                "uid": "f9854a10-1c4f-499a-a456-c0e3875f5403",
                "apiVersion": "apps/v1",
                "resourceVersion": "2370"
            },
            "reason": "SuccessfulDelete",
            "message": "Deleted pod: kubernetes-dashboard-5c848cc544-fxwp9",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard.15f978060840ccaa",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard.15f978060840ccaa",
                "uid": "e60800dc-65c3-4c9d-a372-7d62818366b2",
                "resourceVersion": "1822",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard",
                "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                "apiVersion": "apps/v1",
                "resourceVersion": "1819"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set kubernetes-dashboard-5c848cc544 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard.15f9782e88fdbf6a",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard.15f9782e88fdbf6a",
                "uid": "5daad26d-a193-473f-9512-c1348dae92b6",
                "resourceVersion": "2348",
                "creationTimestamp": "2020-03-05T17:21:25Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard",
                "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                "apiVersion": "apps/v1",
                "resourceVersion": "2343"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set kubernetes-dashboard-5bc7684475 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:21:25Z",
            "lastTimestamp": "2020-03-05T17:21:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard.15f9782f230c2fc1",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/kubernetes-dashboard.15f9782f230c2fc1",
                "uid": "dc52b019-14c0-453c-922f-8a0a79662380",
                "resourceVersion": "2376",
                "creationTimestamp": "2020-03-05T17:21:27Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "kubernetes-dashboard",
                "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                "apiVersion": "apps/v1",
                "resourceVersion": "2354"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled down replica set kubernetes-dashboard-5c848cc544 to 0",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:21:27Z",
            "lastTimestamp": "2020-03-05T17:21:27Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780612e23f59",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780612e23f59",
                "uid": "8419d6e1-23b0-4480-be37-d7ea2c3690ff",
                "resourceVersion": "1866",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1860"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned kube-system/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780647b744b9",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780647b744b9",
                "uid": "77adfaa8-c26c-4274-b844-56ff63ef7eba",
                "resourceVersion": "1895",
                "creationTimestamp": "2020-03-05T17:18:32Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{influxdb}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"k8s.gcr.io/heapster-influxdb-amd64:v1.3.3\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:32Z",
            "lastTimestamp": "2020-03-05T17:18:32Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780768753a95",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780768753a95",
                "uid": "69af323c-41fb-4225-8907-c6b26f4d6d0b",
                "resourceVersion": "1916",
                "creationTimestamp": "2020-03-05T17:18:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{influxdb}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"k8s.gcr.io/heapster-influxdb-amd64:v1.3.3\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:37Z",
            "lastTimestamp": "2020-03-05T17:18:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978076fd5078f",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978076fd5078f",
                "uid": "afc96958-55d2-4987-a827-1a682fc4b8f9",
                "resourceVersion": "1917",
                "creationTimestamp": "2020-03-05T17:18:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{influxdb}"
            },
            "reason": "Created",
            "message": "Created container influxdb",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:37Z",
            "lastTimestamp": "2020-03-05T17:18:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780779f55fcb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f9780779f55fcb",
                "uid": "ac8a711f-4f6b-4de2-8b97-b0ce4c22195e",
                "resourceVersion": "1918",
                "creationTimestamp": "2020-03-05T17:18:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{influxdb}"
            },
            "reason": "Started",
            "message": "Started container influxdb",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:37Z",
            "lastTimestamp": "2020-03-05T17:18:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978077a09e643",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978077a09e643",
                "uid": "7515fea7-3ee1-456f-95ca-2a96b2d07d72",
                "resourceVersion": "1919",
                "creationTimestamp": "2020-03-05T17:18:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{grafana}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"k8s.gcr.io/heapster-grafana-amd64:v4.4.3\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:37Z",
            "lastTimestamp": "2020-03-05T17:18:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978099ccbf5b5",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f978099ccbf5b5",
                "uid": "28ef3681-70f9-472c-9664-25855f1064a3",
                "resourceVersion": "1957",
                "creationTimestamp": "2020-03-05T17:18:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{grafana}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"k8s.gcr.io/heapster-grafana-amd64:v4.4.3\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:46Z",
            "lastTimestamp": "2020-03-05T17:18:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f97809a8e1ea67",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f97809a8e1ea67",
                "uid": "ca43c345-2642-4ddf-918c-4806016e6f67",
                "resourceVersion": "1958",
                "creationTimestamp": "2020-03-05T17:18:46Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{grafana}"
            },
            "reason": "Created",
            "message": "Created container grafana",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:46Z",
            "lastTimestamp": "2020-03-05T17:18:46Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f97809b36d3234",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x.15f97809b36d3234",
                "uid": "3d72021d-1eb7-49ae-a860-34c1a55cf7a2",
                "resourceVersion": "1959",
                "creationTimestamp": "2020-03-05T17:18:47Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "apiVersion": "v1",
                "resourceVersion": "1862",
                "fieldPath": "spec.containers{grafana}"
            },
            "reason": "Started",
            "message": "Started container grafana",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:18:47Z",
            "lastTimestamp": "2020-03-05T17:18:47Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf.15f97806127adeed",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4-6d599df6bf.15f97806127adeed",
                "uid": "3d6aaacb-c638-4388-a6b1-0362f5a005b9",
                "resourceVersion": "1864",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf",
                "uid": "0f41ddbb-0b00-4e17-bab7-26786bfd57d7",
                "apiVersion": "apps/v1",
                "resourceVersion": "1858"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4.15f978061208bc41",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/events/monitoring-influxdb-grafana-v4.15f978061208bc41",
                "uid": "f198cebb-e361-4770-beac-faea86dbfc20",
                "resourceVersion": "1861",
                "creationTimestamp": "2020-03-05T17:18:31Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "kube-system",
                "name": "monitoring-influxdb-grafana-v4",
                "uid": "2be9fda1-6baa-4ca9-a08d-094de7572d37",
                "apiVersion": "apps/v1",
                "resourceVersion": "1857"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set monitoring-influxdb-grafana-v4-6d599df6bf to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:18:31Z",
            "lastTimestamp": "2020-03-05T17:18:31Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/replicationcontrollers",
        "resourceVersion": "4664"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/services",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "dashboard-metrics-scraper",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/dashboard-metrics-scraper",
                "uid": "1af20a58-b18f-403f-aec5-3a167c8bf343",
                "resourceVersion": "1829",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "dashboard-metrics-scraper"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"dashboard-metrics-scraper\"},\"name\":\"dashboard-metrics-scraper\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":8000,\"targetPort\":8000}],\"selector\":{\"k8s-app\":\"dashboard-metrics-scraper\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 8000,
                        "targetPort": 8000
                    }
                ],
                "selector": {
                    "k8s-app": "dashboard-metrics-scraper"
                },
                "clusterIP": "10.152.183.147",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "heapster",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/heapster",
                "uid": "925d888a-1529-42ae-85c2-1f40c57eedb5",
                "resourceVersion": "1855",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "Heapster"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"Heapster\"},\"name\":\"heapster\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":80,\"targetPort\":8082}],\"selector\":{\"k8s-app\":\"heapster\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": 8082
                    }
                ],
                "selector": {
                    "k8s-app": "heapster"
                },
                "clusterIP": "10.152.183.68",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "kube-dns",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kube-dns",
                "uid": "9a865546-81a8-40e8-a73e-ee4e010b97a3",
                "resourceVersion": "1416",
                "creationTimestamp": "2020-03-05T17:16:20Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "CoreDNS"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{\"prometheus.io/port\":\"9153\",\"prometheus.io/scrape\":\"true\"},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"kube-dns\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"CoreDNS\"},\"name\":\"kube-dns\",\"namespace\":\"kube-system\"},\"spec\":{\"clusterIP\":\"10.152.183.10\",\"ports\":[{\"name\":\"dns\",\"port\":53,\"protocol\":\"UDP\"},{\"name\":\"dns-tcp\",\"port\":53,\"protocol\":\"TCP\"},{\"name\":\"metrics\",\"port\":9153,\"protocol\":\"TCP\"}],\"selector\":{\"k8s-app\":\"kube-dns\"}}}\n",
                    "prometheus.io/port": "9153",
                    "prometheus.io/scrape": "true"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "dns",
                        "protocol": "UDP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "dns-tcp",
                        "protocol": "TCP",
                        "port": 53,
                        "targetPort": 53
                    },
                    {
                        "name": "metrics",
                        "protocol": "TCP",
                        "port": 9153,
                        "targetPort": 9153
                    }
                ],
                "selector": {
                    "k8s-app": "kube-dns"
                },
                "clusterIP": "10.152.183.10",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/kubernetes-dashboard",
                "uid": "ea434965-1188-4d7e-aeab-0f2655e60634",
                "resourceVersion": "1809",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "kubernetes-dashboard"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"kubernetes-dashboard\"},\"name\":\"kubernetes-dashboard\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":443,\"targetPort\":8443}],\"selector\":{\"k8s-app\":\"kubernetes-dashboard\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 8443
                    }
                ],
                "selector": {
                    "k8s-app": "kubernetes-dashboard"
                },
                "clusterIP": "10.152.183.234",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "monitoring-grafana",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/monitoring-grafana",
                "uid": "ede7810f-2998-48e1-a386-14b4983d8a01",
                "resourceVersion": "1847",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "Grafana"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"Grafana\"},\"name\":\"monitoring-grafana\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"port\":80,\"protocol\":\"TCP\",\"targetPort\":\"ui\"}],\"selector\":{\"k8s-app\":\"influxGrafana\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": "ui"
                    }
                ],
                "selector": {
                    "k8s-app": "influxGrafana"
                },
                "clusterIP": "10.152.183.133",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "monitoring-influxdb",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/services/monitoring-influxdb",
                "uid": "c3946ef3-da9f-4d15-be06-892431c1293d",
                "resourceVersion": "1852",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "InfluxDB"
                },
                "annotations": {
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"v1\",\"kind\":\"Service\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"InfluxDB\"},\"name\":\"monitoring-influxdb\",\"namespace\":\"kube-system\"},\"spec\":{\"ports\":[{\"name\":\"http\",\"port\":8083,\"targetPort\":8083},{\"name\":\"api\",\"port\":8086,\"targetPort\":8086}],\"selector\":{\"k8s-app\":\"influxGrafana\"}}}\n"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "http",
                        "protocol": "TCP",
                        "port": 8083,
                        "targetPort": 8083
                    },
                    {
                        "name": "api",
                        "protocol": "TCP",
                        "port": 8086,
                        "targetPort": 8086
                    }
                ],
                "selector": {
                    "k8s-app": "influxGrafana"
                },
                "clusterIP": "10.152.183.24",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/daemonsets",
        "resourceVersion": "4664"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/coredns",
                "uid": "70c2c4a2-4b28-4124-bfca-097fc9befaad",
                "resourceVersion": "1478",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:16:20Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "kube-dns",
                    "kubernetes.io/cluster-service": "true",
                    "kubernetes.io/name": "CoreDNS"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"kube-dns\",\"kubernetes.io/cluster-service\":\"true\",\"kubernetes.io/name\":\"CoreDNS\"},\"name\":\"coredns\",\"namespace\":\"kube-system\"},\"spec\":{\"selector\":{\"matchLabels\":{\"k8s-app\":\"kube-dns\"}},\"strategy\":{\"rollingUpdate\":{\"maxSurge\":\"10%\",\"maxUnavailable\":0},\"type\":\"RollingUpdate\"},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"kube-dns\"}},\"spec\":{\"containers\":[{\"args\":[\"-conf\",\"/etc/coredns/Corefile\"],\"image\":\"coredns/coredns:1.5.0\",\"imagePullPolicy\":\"IfNotPresent\",\"livenessProbe\":{\"failureThreshold\":5,\"httpGet\":{\"path\":\"/health\",\"port\":8080,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":60,\"successThreshold\":1,\"timeoutSeconds\":5},\"name\":\"coredns\",\"ports\":[{\"containerPort\":53,\"name\":\"dns\",\"protocol\":\"UDP\"},{\"containerPort\":53,\"name\":\"dns-tcp\",\"protocol\":\"TCP\"},{\"containerPort\":9153,\"name\":\"metrics\",\"protocol\":\"TCP\"}],\"readinessProbe\":{\"httpGet\":{\"path\":\"/ready\",\"port\":8181,\"scheme\":\"HTTP\"}},\"resources\":{\"limits\":{\"memory\":\"170Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"70Mi\"}},\"securityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"add\":[\"NET_BIND_SERVICE\"],\"drop\":[\"all\"]},\"readOnlyRootFilesystem\":true},\"volumeMounts\":[{\"mountPath\":\"/etc/coredns\",\"name\":\"config-volume\",\"readOnly\":true}]}],\"dnsPolicy\":\"Default\",\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"coredns\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"configMap\":{\"items\":[{\"key\":\"Corefile\",\"path\":\"Corefile\"}],\"name\":\"coredns\"},\"name\":\"config-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "coredns/coredns:1.5.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": 0,
                        "maxSurge": "10%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:16:28Z",
                        "lastTransitionTime": "2020-03-05T17:16:28Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:16:28Z",
                        "lastTransitionTime": "2020-03-05T17:16:20Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"coredns-9b8997588\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/dashboard-metrics-scraper",
                "uid": "c902de7b-c13e-4d61-b81e-240bf372a2a3",
                "resourceVersion": "1946",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "dashboard-metrics-scraper"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"dashboard-metrics-scraper\"},\"name\":\"dashboard-metrics-scraper\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"revisionHistoryLimit\":10,\"selector\":{\"matchLabels\":{\"k8s-app\":\"dashboard-metrics-scraper\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"dashboard-metrics-scraper\"}},\"spec\":{\"containers\":[{\"image\":\"kubernetesui/metrics-scraper:v1.0.2\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":8000,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":30,\"timeoutSeconds\":30},\"name\":\"dashboard-metrics-scraper\",\"ports\":[{\"containerPort\":8000,\"protocol\":\"TCP\"}],\"volumeMounts\":[{\"mountPath\":\"/tmp\",\"name\":\"tmp-volume\"}]}],\"serviceAccountName\":\"kubernetes-dashboard\",\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"}],\"volumes\":[{\"emptyDir\":{},\"name\":\"tmp-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "dashboard-metrics-scraper"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "dashboard-metrics-scraper"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "tmp-volume",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "dashboard-metrics-scraper",
                                "image": "kubernetesui/metrics-scraper:v1.0.2",
                                "ports": [
                                    {
                                        "containerPort": 8000,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "tmp-volume",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8000,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kubernetes-dashboard",
                        "serviceAccount": "kubernetes-dashboard",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:42Z",
                        "lastTransitionTime": "2020-03-05T17:18:42Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:42Z",
                        "lastTransitionTime": "2020-03-05T17:18:31Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"dashboard-metrics-scraper-687667bb6c\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/heapster-v1.5.2",
                "uid": "2eac381e-7255-4ff2-9fd7-bc2162b6347a",
                "resourceVersion": "1980",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "heapster",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v1.5.2"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"heapster\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v1.5.2\"},\"name\":\"heapster-v1.5.2\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"k8s-app\":\"heapster\",\"version\":\"v1.5.2\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"heapster\",\"version\":\"v1.5.2\"}},\"spec\":{\"containers\":[{\"command\":[\"/heapster\",\"--source=kubernetes.summary_api:''\",\"--sink=influxdb:http://monitoring-influxdb:8086\"],\"image\":\"k8s.gcr.io/heapster-amd64:v1.5.2\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/healthz\",\"port\":8082,\"scheme\":\"HTTP\"},\"initialDelaySeconds\":180,\"timeoutSeconds\":5},\"name\":\"heapster\"},{\"command\":[\"/eventer\",\"--source=kubernetes:''\",\"--sink=influxdb:http://monitoring-influxdb:8086\"],\"image\":\"k8s.gcr.io/heapster-amd64:v1.5.2\",\"name\":\"eventer\"},{\"command\":[\"/pod_nanny\",\"--config-dir=/etc/config\",\"--cpu=80m\",\"--extra-cpu=0.5m\",\"--memory=140Mi\",\"--extra-memory=4Mi\",\"--threshold=5\",\"--deployment=heapster-v1.5.2\",\"--container=heapster\",\"--poll-period=300000\",\"--estimator=exponential\"],\"env\":[{\"name\":\"MY_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"MY_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"cdkbot/addon-resizer-amd64:1.8.1\",\"name\":\"heapster-nanny\",\"resources\":{\"limits\":{\"cpu\":\"50m\",\"memory\":\"92360Ki\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"92360Ki\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"heapster-config-volume\"}]},{\"command\":[\"/pod_nanny\",\"--config-dir=/etc/config\",\"--cpu=100m\",\"--extra-cpu=0m\",\"--memory=190Mi\",\"--extra-memory=500Ki\",\"--threshold=5\",\"--deployment=heapster-v1.5.2\",\"--container=eventer\",\"--poll-period=300000\",\"--estimator=exponential\"],\"env\":[{\"name\":\"MY_POD_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.name\"}}},{\"name\":\"MY_POD_NAMESPACE\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"metadata.namespace\"}}}],\"image\":\"cdkbot/addon-resizer-amd64:1.8.1\",\"name\":\"eventer-nanny\",\"resources\":{\"limits\":{\"cpu\":\"50m\",\"memory\":\"92360Ki\"},\"requests\":{\"cpu\":\"50m\",\"memory\":\"92360Ki\"}},\"volumeMounts\":[{\"mountPath\":\"/etc/config\",\"name\":\"eventer-config-volume\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"serviceAccountName\":\"heapster\",\"tolerations\":[{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"configMap\":{\"name\":\"heapster-config\"},\"name\":\"heapster-config-volume\"},{\"configMap\":{\"name\":\"eventer-config\"},\"name\":\"eventer-config-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "heapster",
                        "version": "v1.5.2"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "heapster",
                            "version": "v1.5.2"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "heapster-config-volume",
                                "configMap": {
                                    "name": "heapster-config",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "eventer-config-volume",
                                "configMap": {
                                    "name": "eventer-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "heapster",
                                "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                                "command": [
                                    "/heapster",
                                    "--source=kubernetes.summary_api:''",
                                    "--sink=influxdb:http://monitoring-influxdb:8086"
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8082,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 180,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "eventer",
                                "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                                "command": [
                                    "/eventer",
                                    "--source=kubernetes:''",
                                    "--sink=influxdb:http://monitoring-influxdb:8086"
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "heapster-nanny",
                                "image": "cdkbot/addon-resizer-amd64:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=80m",
                                    "--extra-cpu=0.5m",
                                    "--memory=140Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.5.2",
                                    "--container=heapster",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "heapster-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "eventer-nanny",
                                "image": "cdkbot/addon-resizer-amd64:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=100m",
                                    "--extra-cpu=0m",
                                    "--memory=190Mi",
                                    "--extra-memory=500Ki",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.5.2",
                                    "--container=eventer",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "eventer-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "heapster",
                        "serviceAccount": "heapster",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:49Z",
                        "lastTransitionTime": "2020-03-05T17:18:49Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:49Z",
                        "lastTransitionTime": "2020-03-05T17:18:31Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"heapster-v1.5.2-5c58f64f8b\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "hostpath-provisioner",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/hostpath-provisioner",
                "uid": "9de93bda-394f-4a5f-847e-8d378081c2e7",
                "resourceVersion": "1617",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:16:37Z",
                "labels": {
                    "k8s-app": "hostpath-provisioner"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"hostpath-provisioner\"},\"name\":\"hostpath-provisioner\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"revisionHistoryLimit\":0,\"selector\":{\"matchLabels\":{\"k8s-app\":\"hostpath-provisioner\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"hostpath-provisioner\"}},\"spec\":{\"containers\":[{\"env\":[{\"name\":\"NODE_NAME\",\"valueFrom\":{\"fieldRef\":{\"fieldPath\":\"spec.nodeName\"}}},{\"name\":\"PV_DIR\",\"value\":\"/var/snap/microk8s/common/default-storage\"}],\"image\":\"cdkbot/hostpath-provisioner-amd64:1.0.0\",\"name\":\"hostpath-provisioner\",\"volumeMounts\":[{\"mountPath\":\"/var/snap/microk8s/common/default-storage\",\"name\":\"pv-volume\"}]}],\"serviceAccountName\":\"microk8s-hostpath\",\"volumes\":[{\"hostPath\":{\"path\":\"/var/snap/microk8s/common/default-storage\"},\"name\":\"pv-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "hostpath-provisioner"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "hostpath-provisioner"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "pv-volume",
                                "hostPath": {
                                    "path": "/var/snap/microk8s/common/default-storage",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "hostpath-provisioner",
                                "image": "cdkbot/hostpath-provisioner-amd64:1.0.0",
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "PV_DIR",
                                        "value": "/var/snap/microk8s/common/default-storage"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "pv-volume",
                                        "mountPath": "/var/snap/microk8s/common/default-storage"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "microk8s-hostpath",
                        "serviceAccount": "microk8s-hostpath",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 0,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:17:10Z",
                        "lastTransitionTime": "2020-03-05T17:17:10Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:17:10Z",
                        "lastTransitionTime": "2020-03-05T17:16:37Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"hostpath-provisioner-7b9cb5cdb4\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/kubernetes-dashboard",
                "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                "resourceVersion": "2379",
                "generation": 2,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "kubernetes-dashboard"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "2",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"k8s-app\":\"kubernetes-dashboard\"},\"name\":\"kubernetes-dashboard\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"revisionHistoryLimit\":10,\"selector\":{\"matchLabels\":{\"k8s-app\":\"kubernetes-dashboard\"}},\"template\":{\"metadata\":{\"labels\":{\"k8s-app\":\"kubernetes-dashboard\"}},\"spec\":{\"containers\":[{\"args\":[\"--auto-generate-certificates\",\"--namespace=kube-system\"],\"image\":\"kubernetesui/dashboard:v2.0.0-beta5\",\"imagePullPolicy\":\"Always\",\"livenessProbe\":{\"httpGet\":{\"path\":\"/\",\"port\":8443,\"scheme\":\"HTTPS\"},\"initialDelaySeconds\":30,\"timeoutSeconds\":30},\"name\":\"kubernetes-dashboard\",\"ports\":[{\"containerPort\":8443,\"protocol\":\"TCP\"}],\"volumeMounts\":[{\"mountPath\":\"/certs\",\"name\":\"kubernetes-dashboard-certs\"},{\"mountPath\":\"/tmp\",\"name\":\"tmp-volume\"}]}],\"serviceAccountName\":\"kubernetes-dashboard\",\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"}],\"volumes\":[{\"name\":\"kubernetes-dashboard-certs\",\"secret\":{\"secretName\":\"kubernetes-dashboard-certs\"}},{\"emptyDir\":{},\"name\":\"tmp-volume\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kubernetes-dashboard"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kubernetes-dashboard"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kubernetes-dashboard-certs",
                                "secret": {
                                    "secretName": "kubernetes-dashboard-certs",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "tmp-volume",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "kubernetes-dashboard",
                                "image": "kubernetesui/dashboard:v2.0.0-beta5",
                                "args": [
                                    "--auto-generate-certificates",
                                    "--namespace=kube-system",
                                    "--enable-skip-login"
                                ],
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kubernetes-dashboard-certs",
                                        "mountPath": "/certs"
                                    },
                                    {
                                        "name": "tmp-volume",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8443,
                                        "scheme": "HTTPS"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "Always"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kubernetes-dashboard",
                        "serviceAccount": "kubernetes-dashboard",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 2,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:36Z",
                        "lastTransitionTime": "2020-03-05T17:18:36Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:21:27Z",
                        "lastTransitionTime": "2020-03-05T17:18:31Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"kubernetes-dashboard-5bc7684475\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/deployments/monitoring-influxdb-grafana-v4",
                "uid": "2be9fda1-6baa-4ca9-a08d-094de7572d37",
                "resourceVersion": "1965",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "addonmanager.kubernetes.io/mode": "Reconcile",
                    "k8s-app": "influxGrafana",
                    "kubernetes.io/cluster-service": "true",
                    "version": "v4"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1",
                    "kubectl.kubernetes.io/last-applied-configuration": "{\"apiVersion\":\"apps/v1\",\"kind\":\"Deployment\",\"metadata\":{\"annotations\":{},\"labels\":{\"addonmanager.kubernetes.io/mode\":\"Reconcile\",\"k8s-app\":\"influxGrafana\",\"kubernetes.io/cluster-service\":\"true\",\"version\":\"v4\"},\"name\":\"monitoring-influxdb-grafana-v4\",\"namespace\":\"kube-system\"},\"spec\":{\"replicas\":1,\"selector\":{\"matchLabels\":{\"k8s-app\":\"influxGrafana\",\"version\":\"v4\"}},\"template\":{\"metadata\":{\"annotations\":{\"scheduler.alpha.kubernetes.io/critical-pod\":\"\"},\"labels\":{\"k8s-app\":\"influxGrafana\",\"version\":\"v4\"}},\"spec\":{\"containers\":[{\"image\":\"k8s.gcr.io/heapster-influxdb-amd64:v1.3.3\",\"name\":\"influxdb\",\"ports\":[{\"containerPort\":8083,\"name\":\"http\"},{\"containerPort\":8086,\"name\":\"api\"}],\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/data\",\"name\":\"influxdb-persistent-storage\"}]},{\"env\":[{\"name\":\"INFLUXDB_SERVICE_URL\",\"value\":\"http://monitoring-influxdb:8086\"},{\"name\":\"GF_AUTH_BASIC_ENABLED\",\"value\":\"false\"},{\"name\":\"GF_AUTH_ANONYMOUS_ENABLED\",\"value\":\"true\"},{\"name\":\"GF_AUTH_ANONYMOUS_ORG_ROLE\",\"value\":\"Admin\"},{\"name\":\"GF_SERVER_ROOT_URL\",\"value\":\"/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/\"}],\"image\":\"k8s.gcr.io/heapster-grafana-amd64:v4.4.3\",\"name\":\"grafana\",\"ports\":[{\"containerPort\":3000,\"name\":\"ui\"}],\"resources\":{\"limits\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"100Mi\"}},\"volumeMounts\":[{\"mountPath\":\"/var\",\"name\":\"grafana-persistent-storage\"}]}],\"priorityClassName\":\"system-cluster-critical\",\"tolerations\":[{\"effect\":\"NoSchedule\",\"key\":\"node-role.kubernetes.io/master\"},{\"key\":\"CriticalAddonsOnly\",\"operator\":\"Exists\"}],\"volumes\":[{\"emptyDir\":{},\"name\":\"influxdb-persistent-storage\"},{\"emptyDir\":{},\"name\":\"grafana-persistent-storage\"}]}}}}\n"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "influxGrafana",
                        "version": "v4"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "influxGrafana",
                            "version": "v4"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "influxdb-persistent-storage",
                                "emptyDir": {}
                            },
                            {
                                "name": "grafana-persistent-storage",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "influxdb",
                                "image": "k8s.gcr.io/heapster-influxdb-amd64:v1.3.3",
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 8083,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "api",
                                        "containerPort": 8086,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "500Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "500Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "influxdb-persistent-storage",
                                        "mountPath": "/data"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "grafana",
                                "image": "k8s.gcr.io/heapster-grafana-amd64:v4.4.3",
                                "ports": [
                                    {
                                        "name": "ui",
                                        "containerPort": 3000,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "INFLUXDB_SERVICE_URL",
                                        "value": "http://monitoring-influxdb:8086"
                                    },
                                    {
                                        "name": "GF_AUTH_BASIC_ENABLED",
                                        "value": "false"
                                    },
                                    {
                                        "name": "GF_AUTH_ANONYMOUS_ENABLED",
                                        "value": "true"
                                    },
                                    {
                                        "name": "GF_AUTH_ANONYMOUS_ORG_ROLE",
                                        "value": "Admin"
                                    },
                                    {
                                        "name": "GF_SERVER_ROOT_URL",
                                        "value": "/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "100Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "100Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "grafana-persistent-storage",
                                        "mountPath": "/var"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:47Z",
                        "lastTransitionTime": "2020-03-05T17:18:47Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:18:47Z",
                        "lastTransitionTime": "2020-03-05T17:18:31Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"monitoring-influxdb-grafana-v4-6d599df6bf\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-9b8997588",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/coredns-9b8997588",
                "uid": "4a3e2a49-40c7-440c-810e-25bbeb725b13",
                "resourceVersion": "1476",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:16:20Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "9b8997588"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "coredns",
                        "uid": "70c2c4a2-4b28-4124-bfca-097fc9befaad",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kube-dns",
                        "pod-template-hash": "9b8997588"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kube-dns",
                            "pod-template-hash": "9b8997588"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "config-volume",
                                "configMap": {
                                    "name": "coredns",
                                    "items": [
                                        {
                                            "key": "Corefile",
                                            "path": "Corefile"
                                        }
                                    ],
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "coredns",
                                "image": "coredns/coredns:1.5.0",
                                "args": [
                                    "-conf",
                                    "/etc/coredns/Corefile"
                                ],
                                "ports": [
                                    {
                                        "name": "dns",
                                        "containerPort": 53,
                                        "protocol": "UDP"
                                    },
                                    {
                                        "name": "dns-tcp",
                                        "containerPort": 53,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "metrics",
                                        "containerPort": 9153,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "memory": "170Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "70Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "config-volume",
                                        "readOnly": true,
                                        "mountPath": "/etc/coredns"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/health",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 60,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 5
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/ready",
                                        "port": 8181,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "all"
                                        ]
                                    },
                                    "readOnlyRootFilesystem": true,
                                    "allowPrivilegeEscalation": false
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "Default",
                        "serviceAccountName": "coredns",
                        "serviceAccount": "coredns",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/dashboard-metrics-scraper-687667bb6c",
                "uid": "bd05b995-33ad-4dec-af0e-eeb85e39bd17",
                "resourceVersion": "1945",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "dashboard-metrics-scraper",
                    "pod-template-hash": "687667bb6c"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "dashboard-metrics-scraper",
                        "uid": "c902de7b-c13e-4d61-b81e-240bf372a2a3",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "dashboard-metrics-scraper",
                        "pod-template-hash": "687667bb6c"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "dashboard-metrics-scraper",
                            "pod-template-hash": "687667bb6c"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "tmp-volume",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "dashboard-metrics-scraper",
                                "image": "kubernetesui/metrics-scraper:v1.0.2",
                                "ports": [
                                    {
                                        "containerPort": 8000,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "tmp-volume",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8000,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kubernetes-dashboard",
                        "serviceAccount": "kubernetes-dashboard",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/heapster-v1.5.2-5c58f64f8b",
                "uid": "037a7b4a-88f3-4b98-9b22-80d1ba02895b",
                "resourceVersion": "1979",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "heapster",
                    "pod-template-hash": "5c58f64f8b",
                    "version": "v1.5.2"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "heapster-v1.5.2",
                        "uid": "2eac381e-7255-4ff2-9fd7-bc2162b6347a",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "heapster",
                        "pod-template-hash": "5c58f64f8b",
                        "version": "v1.5.2"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "heapster",
                            "pod-template-hash": "5c58f64f8b",
                            "version": "v1.5.2"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "heapster-config-volume",
                                "configMap": {
                                    "name": "heapster-config",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "eventer-config-volume",
                                "configMap": {
                                    "name": "eventer-config",
                                    "defaultMode": 420
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "heapster",
                                "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                                "command": [
                                    "/heapster",
                                    "--source=kubernetes.summary_api:''",
                                    "--sink=influxdb:http://monitoring-influxdb:8086"
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8082,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 180,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "eventer",
                                "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                                "command": [
                                    "/eventer",
                                    "--source=kubernetes:''",
                                    "--sink=influxdb:http://monitoring-influxdb:8086"
                                ],
                                "resources": {},
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "heapster-nanny",
                                "image": "cdkbot/addon-resizer-amd64:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=80m",
                                    "--extra-cpu=0.5m",
                                    "--memory=140Mi",
                                    "--extra-memory=4Mi",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.5.2",
                                    "--container=heapster",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "heapster-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "eventer-nanny",
                                "image": "cdkbot/addon-resizer-amd64:1.8.1",
                                "command": [
                                    "/pod_nanny",
                                    "--config-dir=/etc/config",
                                    "--cpu=100m",
                                    "--extra-cpu=0m",
                                    "--memory=190Mi",
                                    "--extra-memory=500Ki",
                                    "--threshold=5",
                                    "--deployment=heapster-v1.5.2",
                                    "--container=eventer",
                                    "--poll-period=300000",
                                    "--estimator=exponential"
                                ],
                                "env": [
                                    {
                                        "name": "MY_POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "MY_POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    },
                                    "requests": {
                                        "cpu": "50m",
                                        "memory": "92360Ki"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "eventer-config-volume",
                                        "mountPath": "/etc/config"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "heapster",
                        "serviceAccount": "heapster",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/hostpath-provisioner-7b9cb5cdb4",
                "uid": "d47011dd-bb80-4e0d-8da7-0f2c66d7b7cc",
                "resourceVersion": "1616",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:16:37Z",
                "labels": {
                    "k8s-app": "hostpath-provisioner",
                    "pod-template-hash": "7b9cb5cdb4"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "hostpath-provisioner",
                        "uid": "9de93bda-394f-4a5f-847e-8d378081c2e7",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "hostpath-provisioner",
                        "pod-template-hash": "7b9cb5cdb4"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "hostpath-provisioner",
                            "pod-template-hash": "7b9cb5cdb4"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "pv-volume",
                                "hostPath": {
                                    "path": "/var/snap/microk8s/common/default-storage",
                                    "type": ""
                                }
                            }
                        ],
                        "containers": [
                            {
                                "name": "hostpath-provisioner",
                                "image": "cdkbot/hostpath-provisioner-amd64:1.0.0",
                                "env": [
                                    {
                                        "name": "NODE_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "spec.nodeName"
                                            }
                                        }
                                    },
                                    {
                                        "name": "PV_DIR",
                                        "value": "/var/snap/microk8s/common/default-storage"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "pv-volume",
                                        "mountPath": "/var/snap/microk8s/common/default-storage"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "microk8s-hostpath",
                        "serviceAccount": "microk8s-hostpath",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/kubernetes-dashboard-5bc7684475",
                "uid": "92613ff3-a8a3-4921-8bcc-7e84e12a7732",
                "resourceVersion": "2368",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:21:25Z",
                "labels": {
                    "k8s-app": "kubernetes-dashboard",
                    "pod-template-hash": "5bc7684475"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "2"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "kubernetes-dashboard",
                        "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kubernetes-dashboard",
                        "pod-template-hash": "5bc7684475"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kubernetes-dashboard",
                            "pod-template-hash": "5bc7684475"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kubernetes-dashboard-certs",
                                "secret": {
                                    "secretName": "kubernetes-dashboard-certs",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "tmp-volume",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "kubernetes-dashboard",
                                "image": "kubernetesui/dashboard:v2.0.0-beta5",
                                "args": [
                                    "--auto-generate-certificates",
                                    "--namespace=kube-system",
                                    "--enable-skip-login"
                                ],
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kubernetes-dashboard-certs",
                                        "mountPath": "/certs"
                                    },
                                    {
                                        "name": "tmp-volume",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8443,
                                        "scheme": "HTTPS"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "Always"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kubernetes-dashboard",
                        "serviceAccount": "kubernetes-dashboard",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5c848cc544",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/kubernetes-dashboard-5c848cc544",
                "uid": "f9854a10-1c4f-499a-a456-c0e3875f5403",
                "resourceVersion": "2378",
                "generation": 2,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "kubernetes-dashboard",
                    "pod-template-hash": "5c848cc544"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "kubernetes-dashboard",
                        "uid": "56360f61-d1e4-4d06-a29a-e5cb58b7bf38",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 0,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "kubernetes-dashboard",
                        "pod-template-hash": "5c848cc544"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "kubernetes-dashboard",
                            "pod-template-hash": "5c848cc544"
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "kubernetes-dashboard-certs",
                                "secret": {
                                    "secretName": "kubernetes-dashboard-certs",
                                    "defaultMode": 420
                                }
                            },
                            {
                                "name": "tmp-volume",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "kubernetes-dashboard",
                                "image": "kubernetesui/dashboard:v2.0.0-beta5",
                                "args": [
                                    "--auto-generate-certificates",
                                    "--namespace=kube-system"
                                ],
                                "ports": [
                                    {
                                        "containerPort": 8443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "volumeMounts": [
                                    {
                                        "name": "kubernetes-dashboard-certs",
                                        "mountPath": "/certs"
                                    },
                                    {
                                        "name": "tmp-volume",
                                        "mountPath": "/tmp"
                                    }
                                ],
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/",
                                        "port": 8443,
                                        "scheme": "HTTPS"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 30,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "Always"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "kubernetes-dashboard",
                        "serviceAccount": "kubernetes-dashboard",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            }
                        ]
                    }
                }
            },
            "status": {
                "replicas": 0,
                "observedGeneration": 2
            }
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf",
                "namespace": "kube-system",
                "selfLink": "/apis/apps/v1/namespaces/kube-system/replicasets/monitoring-influxdb-grafana-v4-6d599df6bf",
                "uid": "0f41ddbb-0b00-4e17-bab7-26786bfd57d7",
                "resourceVersion": "1962",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "influxGrafana",
                    "pod-template-hash": "6d599df6bf",
                    "version": "v4"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "monitoring-influxdb-grafana-v4",
                        "uid": "2be9fda1-6baa-4ca9-a08d-094de7572d37",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "k8s-app": "influxGrafana",
                        "pod-template-hash": "6d599df6bf",
                        "version": "v4"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "k8s-app": "influxGrafana",
                            "pod-template-hash": "6d599df6bf",
                            "version": "v4"
                        },
                        "annotations": {
                            "scheduler.alpha.kubernetes.io/critical-pod": ""
                        }
                    },
                    "spec": {
                        "volumes": [
                            {
                                "name": "influxdb-persistent-storage",
                                "emptyDir": {}
                            },
                            {
                                "name": "grafana-persistent-storage",
                                "emptyDir": {}
                            }
                        ],
                        "containers": [
                            {
                                "name": "influxdb",
                                "image": "k8s.gcr.io/heapster-influxdb-amd64:v1.3.3",
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 8083,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "api",
                                        "containerPort": 8086,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "500Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "500Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "influxdb-persistent-storage",
                                        "mountPath": "/data"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            },
                            {
                                "name": "grafana",
                                "image": "k8s.gcr.io/heapster-grafana-amd64:v4.4.3",
                                "ports": [
                                    {
                                        "name": "ui",
                                        "containerPort": 3000,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "INFLUXDB_SERVICE_URL",
                                        "value": "http://monitoring-influxdb:8086"
                                    },
                                    {
                                        "name": "GF_AUTH_BASIC_ENABLED",
                                        "value": "false"
                                    },
                                    {
                                        "name": "GF_AUTH_ANONYMOUS_ENABLED",
                                        "value": "true"
                                    },
                                    {
                                        "name": "GF_AUTH_ANONYMOUS_ORG_ROLE",
                                        "value": "Admin"
                                    },
                                    {
                                        "name": "GF_SERVER_ROOT_URL",
                                        "value": "/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/"
                                    }
                                ],
                                "resources": {
                                    "limits": {
                                        "cpu": "100m",
                                        "memory": "100Mi"
                                    },
                                    "requests": {
                                        "cpu": "100m",
                                        "memory": "100Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "name": "grafana-persistent-storage",
                                        "mountPath": "/var"
                                    }
                                ],
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent"
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 30,
                        "dnsPolicy": "ClusterFirst",
                        "securityContext": {},
                        "schedulerName": "default-scheduler",
                        "tolerations": [
                            {
                                "key": "node-role.kubernetes.io/master",
                                "effect": "NoSchedule"
                            },
                            {
                                "key": "CriticalAddonsOnly",
                                "operator": "Exists"
                            }
                        ],
                        "priorityClassName": "system-cluster-critical"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/kube-system/pods",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "coredns-9b8997588-nkwbz",
                "generateName": "coredns-9b8997588-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/coredns-9b8997588-nkwbz",
                "uid": "946c07ae-8c33-4f2d-b8b6-b5721f92019e",
                "resourceVersion": "1475",
                "creationTimestamp": "2020-03-05T17:16:20Z",
                "labels": {
                    "k8s-app": "kube-dns",
                    "pod-template-hash": "9b8997588"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "coredns-9b8997588",
                        "uid": "4a3e2a49-40c7-440c-810e-25bbeb725b13",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "config-volume",
                        "configMap": {
                            "name": "coredns",
                            "items": [
                                {
                                    "key": "Corefile",
                                    "path": "Corefile"
                                }
                            ],
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "coredns-token-4rngv",
                        "secret": {
                            "secretName": "coredns-token-4rngv",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "coredns",
                        "image": "coredns/coredns:1.5.0",
                        "args": [
                            "-conf",
                            "/etc/coredns/Corefile"
                        ],
                        "ports": [
                            {
                                "name": "dns",
                                "containerPort": 53,
                                "protocol": "UDP"
                            },
                            {
                                "name": "dns-tcp",
                                "containerPort": 53,
                                "protocol": "TCP"
                            },
                            {
                                "name": "metrics",
                                "containerPort": 9153,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "memory": "170Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "70Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "config-volume",
                                "readOnly": true,
                                "mountPath": "/etc/coredns"
                            },
                            {
                                "name": "coredns-token-4rngv",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/health",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 60,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 5
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/ready",
                                "port": 8181,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "all"
                                ]
                            },
                            "readOnlyRootFilesystem": true,
                            "allowPrivilegeEscalation": false
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "Default",
                "serviceAccountName": "coredns",
                "serviceAccount": "coredns",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:20Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:28Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:28Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:20Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.2",
                "podIPs": [
                    {
                        "ip": "10.1.75.2"
                    }
                ],
                "startTime": "2020-03-05T17:16:20Z",
                "containerStatuses": [
                    {
                        "name": "coredns",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:16:27Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/coredns/coredns:1.5.0",
                        "imageID": "sha256:7987f0908caf347ac98bc23ef590eaf659dcdca661d57fdada563ccfe7edb043",
                        "containerID": "containerd://ea588c4587dbfb8a0fe4fc7997bab921ea5ae4602a6fe8c28c1992fcc5c3629b",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "dashboard-metrics-scraper-687667bb6c-vn9dd",
                "generateName": "dashboard-metrics-scraper-687667bb6c-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/dashboard-metrics-scraper-687667bb6c-vn9dd",
                "uid": "ff738e21-6436-43a8-a327-d51e2be38a23",
                "resourceVersion": "1942",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "dashboard-metrics-scraper",
                    "pod-template-hash": "687667bb6c"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "dashboard-metrics-scraper-687667bb6c",
                        "uid": "bd05b995-33ad-4dec-af0e-eeb85e39bd17",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "tmp-volume",
                        "emptyDir": {}
                    },
                    {
                        "name": "kubernetes-dashboard-token-sdk5j",
                        "secret": {
                            "secretName": "kubernetes-dashboard-token-sdk5j",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "dashboard-metrics-scraper",
                        "image": "kubernetesui/metrics-scraper:v1.0.2",
                        "ports": [
                            {
                                "containerPort": 8000,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "tmp-volume",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "kubernetes-dashboard-token-sdk5j",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/",
                                "port": 8000,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 30,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "kubernetes-dashboard",
                "serviceAccount": "kubernetes-dashboard",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:42Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:42Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.5",
                "podIPs": [
                    {
                        "ip": "10.1.75.5"
                    }
                ],
                "startTime": "2020-03-05T17:18:31Z",
                "containerStatuses": [
                    {
                        "name": "dashboard-metrics-scraper",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:42Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/kubernetesui/metrics-scraper:v1.0.2",
                        "imageID": "docker.io/kubernetesui/metrics-scraper@sha256:2026f9f7558d0f25cc6bab74ea201b4e9d5668fbc378ef64e13fddaea570efc0",
                        "containerID": "containerd://59bf2bd45055f4f4b69c6b2583bf6577a6cf16385d47ec0837ef4f16830d1db5",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "heapster-v1.5.2-5c58f64f8b-b95x9",
                "generateName": "heapster-v1.5.2-5c58f64f8b-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/heapster-v1.5.2-5c58f64f8b-b95x9",
                "uid": "9954ba0d-a3c1-4ed9-8e37-2797b3c7195c",
                "resourceVersion": "1977",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "heapster",
                    "pod-template-hash": "5c58f64f8b",
                    "version": "v1.5.2"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "heapster-v1.5.2-5c58f64f8b",
                        "uid": "037a7b4a-88f3-4b98-9b22-80d1ba02895b",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "heapster-config-volume",
                        "configMap": {
                            "name": "heapster-config",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "eventer-config-volume",
                        "configMap": {
                            "name": "eventer-config",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "heapster-token-bhclt",
                        "secret": {
                            "secretName": "heapster-token-bhclt",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "heapster",
                        "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                        "command": [
                            "/heapster",
                            "--source=kubernetes.summary_api:''",
                            "--sink=influxdb:http://monitoring-influxdb:8086"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "heapster-token-bhclt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8082,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 180,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "eventer",
                        "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                        "command": [
                            "/eventer",
                            "--source=kubernetes:''",
                            "--sink=influxdb:http://monitoring-influxdb:8086"
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "heapster-token-bhclt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "heapster-nanny",
                        "image": "cdkbot/addon-resizer-amd64:1.8.1",
                        "command": [
                            "/pod_nanny",
                            "--config-dir=/etc/config",
                            "--cpu=80m",
                            "--extra-cpu=0.5m",
                            "--memory=140Mi",
                            "--extra-memory=4Mi",
                            "--threshold=5",
                            "--deployment=heapster-v1.5.2",
                            "--container=heapster",
                            "--poll-period=300000",
                            "--estimator=exponential"
                        ],
                        "env": [
                            {
                                "name": "MY_POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "MY_POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "50m",
                                "memory": "92360Ki"
                            },
                            "requests": {
                                "cpu": "50m",
                                "memory": "92360Ki"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "heapster-config-volume",
                                "mountPath": "/etc/config"
                            },
                            {
                                "name": "heapster-token-bhclt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "eventer-nanny",
                        "image": "cdkbot/addon-resizer-amd64:1.8.1",
                        "command": [
                            "/pod_nanny",
                            "--config-dir=/etc/config",
                            "--cpu=100m",
                            "--extra-cpu=0m",
                            "--memory=190Mi",
                            "--extra-memory=500Ki",
                            "--threshold=5",
                            "--deployment=heapster-v1.5.2",
                            "--container=eventer",
                            "--poll-period=300000",
                            "--estimator=exponential"
                        ],
                        "env": [
                            {
                                "name": "MY_POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "MY_POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "50m",
                                "memory": "92360Ki"
                            },
                            "requests": {
                                "cpu": "50m",
                                "memory": "92360Ki"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "eventer-config-volume",
                                "mountPath": "/etc/config"
                            },
                            {
                                "name": "heapster-token-bhclt",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "heapster",
                "serviceAccount": "heapster",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:49Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:49Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.7",
                "podIPs": [
                    {
                        "ip": "10.1.75.7"
                    }
                ],
                "startTime": "2020-03-05T17:18:31Z",
                "containerStatuses": [
                    {
                        "name": "eventer",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:40Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                        "imageID": "k8s.gcr.io/heapster-amd64@sha256:59fb34ffd902282d06fcc940a906df9787edf78651743f4c8c4abf8b3468c0e9",
                        "containerID": "containerd://ed71ccd613ab372074a8a683422f98fd0c2d5e0ea62ea2657a8d43c62e1ebf12",
                        "started": true
                    },
                    {
                        "name": "eventer-nanny",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:49Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/cdkbot/addon-resizer-amd64:1.8.1",
                        "imageID": "docker.io/cdkbot/addon-resizer-amd64@sha256:a5ff31fb60d32e02780441fc81bc91dd549097d6afeef3c6decb6005289795af",
                        "containerID": "containerd://8e53cdc7e71952975eb35e655981572220abadb24e112cccb228487927d4c0da",
                        "started": true
                    },
                    {
                        "name": "heapster",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:40Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/heapster-amd64:v1.5.2",
                        "imageID": "k8s.gcr.io/heapster-amd64@sha256:59fb34ffd902282d06fcc940a906df9787edf78651743f4c8c4abf8b3468c0e9",
                        "containerID": "containerd://d4cf77fd0a287b469e22170124ddf9e71ad848766483ae346dcbedcb6f75c970",
                        "started": true
                    },
                    {
                        "name": "heapster-nanny",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:48Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/cdkbot/addon-resizer-amd64:1.8.1",
                        "imageID": "docker.io/cdkbot/addon-resizer-amd64@sha256:a5ff31fb60d32e02780441fc81bc91dd549097d6afeef3c6decb6005289795af",
                        "containerID": "containerd://ef4eb9dff4bdceabac766f47e0c06e2b8a2a531c1e791c4f52f56cdfcfd0c4d8",
                        "started": true
                    }
                ],
                "qosClass": "Burstable"
            }
        },
        {
            "metadata": {
                "name": "hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "generateName": "hostpath-provisioner-7b9cb5cdb4-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/hostpath-provisioner-7b9cb5cdb4-b9xbq",
                "uid": "9cdbb6a8-4d02-4a08-8ff8-e70dafe3413d",
                "resourceVersion": "1615",
                "creationTimestamp": "2020-03-05T17:16:38Z",
                "labels": {
                    "k8s-app": "hostpath-provisioner",
                    "pod-template-hash": "7b9cb5cdb4"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "hostpath-provisioner-7b9cb5cdb4",
                        "uid": "d47011dd-bb80-4e0d-8da7-0f2c66d7b7cc",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "pv-volume",
                        "hostPath": {
                            "path": "/var/snap/microk8s/common/default-storage",
                            "type": ""
                        }
                    },
                    {
                        "name": "microk8s-hostpath-token-4wb2r",
                        "secret": {
                            "secretName": "microk8s-hostpath-token-4wb2r",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "hostpath-provisioner",
                        "image": "cdkbot/hostpath-provisioner-amd64:1.0.0",
                        "env": [
                            {
                                "name": "NODE_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "spec.nodeName"
                                    }
                                }
                            },
                            {
                                "name": "PV_DIR",
                                "value": "/var/snap/microk8s/common/default-storage"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "pv-volume",
                                "mountPath": "/var/snap/microk8s/common/default-storage"
                            },
                            {
                                "name": "microk8s-hostpath-token-4wb2r",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "microk8s-hostpath",
                "serviceAccount": "microk8s-hostpath",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:38Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:17:10Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:17:10Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:16:38Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.3",
                "podIPs": [
                    {
                        "ip": "10.1.75.3"
                    }
                ],
                "startTime": "2020-03-05T17:16:38Z",
                "containerStatuses": [
                    {
                        "name": "hostpath-provisioner",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:17:09Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/cdkbot/hostpath-provisioner-amd64:1.0.0",
                        "imageID": "docker.io/cdkbot/hostpath-provisioner-amd64@sha256:339f78eabc68ffb1656d584e41f121cb4d2b667565428c8dde836caf5b8a0228",
                        "containerID": "containerd://9bf26d3c9722871305e760737c89ac395c427eb8a5eeebc9b43dab3671ec4441",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "kubernetes-dashboard-5bc7684475-ck8cc",
                "generateName": "kubernetes-dashboard-5bc7684475-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/kubernetes-dashboard-5bc7684475-ck8cc",
                "uid": "d4e00359-38bc-4440-91aa-299079aede78",
                "resourceVersion": "2367",
                "creationTimestamp": "2020-03-05T17:21:25Z",
                "labels": {
                    "k8s-app": "kubernetes-dashboard",
                    "pod-template-hash": "5bc7684475"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "kubernetes-dashboard-5bc7684475",
                        "uid": "92613ff3-a8a3-4921-8bcc-7e84e12a7732",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "kubernetes-dashboard-certs",
                        "secret": {
                            "secretName": "kubernetes-dashboard-certs",
                            "defaultMode": 420
                        }
                    },
                    {
                        "name": "tmp-volume",
                        "emptyDir": {}
                    },
                    {
                        "name": "kubernetes-dashboard-token-sdk5j",
                        "secret": {
                            "secretName": "kubernetes-dashboard-token-sdk5j",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "kubernetes-dashboard",
                        "image": "kubernetesui/dashboard:v2.0.0-beta5",
                        "args": [
                            "--auto-generate-certificates",
                            "--namespace=kube-system",
                            "--enable-skip-login"
                        ],
                        "ports": [
                            {
                                "containerPort": 8443,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "kubernetes-dashboard-certs",
                                "mountPath": "/certs"
                            },
                            {
                                "name": "tmp-volume",
                                "mountPath": "/tmp"
                            },
                            {
                                "name": "kubernetes-dashboard-token-sdk5j",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/",
                                "port": 8443,
                                "scheme": "HTTPS"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 30,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "Always"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "kubernetes-dashboard",
                "serviceAccount": "kubernetes-dashboard",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:21:25Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:21:27Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:21:27Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:21:25Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.8",
                "podIPs": [
                    {
                        "ip": "10.1.75.8"
                    }
                ],
                "startTime": "2020-03-05T17:21:25Z",
                "containerStatuses": [
                    {
                        "name": "kubernetes-dashboard",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:21:27Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "docker.io/kubernetesui/dashboard:v2.0.0-beta5",
                        "imageID": "docker.io/kubernetesui/dashboard@sha256:ae756074fa3d1b72c39aa98cfc6246c6923e7da3beaf350d80b91167be868871",
                        "containerID": "containerd://294a2e8a70d3a4362262e4ed74317dc9c8afff1d519c9d6fa0863317c7fb5714",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "generateName": "monitoring-influxdb-grafana-v4-6d599df6bf-",
                "namespace": "kube-system",
                "selfLink": "/api/v1/namespaces/kube-system/pods/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x",
                "uid": "a9b9d671-1372-4c4b-9893-554a1d7d2de2",
                "resourceVersion": "1961",
                "creationTimestamp": "2020-03-05T17:18:31Z",
                "labels": {
                    "k8s-app": "influxGrafana",
                    "pod-template-hash": "6d599df6bf",
                    "version": "v4"
                },
                "annotations": {
                    "scheduler.alpha.kubernetes.io/critical-pod": ""
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "monitoring-influxdb-grafana-v4-6d599df6bf",
                        "uid": "0f41ddbb-0b00-4e17-bab7-26786bfd57d7",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "influxdb-persistent-storage",
                        "emptyDir": {}
                    },
                    {
                        "name": "grafana-persistent-storage",
                        "emptyDir": {}
                    },
                    {
                        "name": "default-token-xl2tz",
                        "secret": {
                            "secretName": "default-token-xl2tz",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "influxdb",
                        "image": "k8s.gcr.io/heapster-influxdb-amd64:v1.3.3",
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 8083,
                                "protocol": "TCP"
                            },
                            {
                                "name": "api",
                                "containerPort": 8086,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "500Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "500Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "influxdb-persistent-storage",
                                "mountPath": "/data"
                            },
                            {
                                "name": "default-token-xl2tz",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    },
                    {
                        "name": "grafana",
                        "image": "k8s.gcr.io/heapster-grafana-amd64:v4.4.3",
                        "ports": [
                            {
                                "name": "ui",
                                "containerPort": 3000,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "INFLUXDB_SERVICE_URL",
                                "value": "http://monitoring-influxdb:8086"
                            },
                            {
                                "name": "GF_AUTH_BASIC_ENABLED",
                                "value": "false"
                            },
                            {
                                "name": "GF_AUTH_ANONYMOUS_ENABLED",
                                "value": "true"
                            },
                            {
                                "name": "GF_AUTH_ANONYMOUS_ORG_ROLE",
                                "value": "Admin"
                            },
                            {
                                "name": "GF_SERVER_ROOT_URL",
                                "value": "/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/"
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            },
                            "requests": {
                                "cpu": "100m",
                                "memory": "100Mi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "grafana-persistent-storage",
                                "mountPath": "/var"
                            },
                            {
                                "name": "default-token-xl2tz",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "default",
                "serviceAccount": "default",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node-role.kubernetes.io/master",
                        "effect": "NoSchedule"
                    },
                    {
                        "key": "CriticalAddonsOnly",
                        "operator": "Exists"
                    },
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priorityClassName": "system-cluster-critical",
                "priority": 2000000000,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:47Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:47Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:18:31Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.6",
                "podIPs": [
                    {
                        "ip": "10.1.75.6"
                    }
                ],
                "startTime": "2020-03-05T17:18:31Z",
                "containerStatuses": [
                    {
                        "name": "grafana",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:47Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/heapster-grafana-amd64:v4.4.3",
                        "imageID": "k8s.gcr.io/heapster-grafana-amd64@sha256:4a472eb4df03f4f557d80e7c6b903d9c8fe31493108b99fbd6da6540b5448d70",
                        "containerID": "containerd://2f5fa0c3f360332f4537fd891e8d6586cca104237dca843b69310f574f87813b",
                        "started": true
                    },
                    {
                        "name": "influxdb",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:18:37Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/heapster-influxdb-amd64:v1.3.3",
                        "imageID": "k8s.gcr.io/heapster-influxdb-amd64@sha256:f433e331c1865ad87bc5387589965528b78cd6b1b2f61697e589584d690c1edd",
                        "containerID": "containerd://325ea7804380285f6b4d5af698a9548961e90fac0757cab39289889850647fd5",
                        "started": true
                    }
                ],
                "qosClass": "Guaranteed"
            }
        }
    ]
}
==== START logs for container coredns of pod kube-system/coredns-9b8997588-nkwbz ====
.:53
2020-03-05T17:16:27.656Z [INFO] plugin/reload: Running configuration MD5 = 5d839962c224ea2e9fb32222b6a237d1
2020-03-05T17:16:27.657Z [INFO] CoreDNS-1.5.0
2020-03-05T17:16:27.657Z [INFO] linux/amd64, go1.12.2, e3f9a80
CoreDNS-1.5.0
linux/amd64, go1.12.2, e3f9a80
==== END logs for container coredns of pod kube-system/coredns-9b8997588-nkwbz ====
==== START logs for container dashboard-metrics-scraper of pod kube-system/dashboard-metrics-scraper-687667bb6c-vn9dd ====
{"level":"info","msg":"Kubernetes host: https://10.152.183.1:443","time":"2020-03-05T17:18:42Z"}
10.1.75.1 - - [05/Mar/2020:17:19:06 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:19:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:19:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:19:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:19:36 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:19:42Z"}
10.1.75.1 - - [05/Mar/2020:17:19:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:19:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:06 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:20:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:36 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:20:42Z"}
10.1.75.1 - - [05/Mar/2020:17:20:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:20:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:06 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:21:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:21:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:21:42Z"}
10.1.75.1 - - [05/Mar/2020:17:21:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:21:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:22:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:22:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:22:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:22:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:22:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:22:42Z"}
10.1.75.1 - - [05/Mar/2020:17:22:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:22:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:22:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:23:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:23:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:23:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:23:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:23:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:23:42Z"}
10.1.75.1 - - [05/Mar/2020:17:23:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:23:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:23:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:24:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:24:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:24:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:24:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:24:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:24:42Z"}
10.1.75.1 - - [05/Mar/2020:17:24:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:24:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:24:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:25:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:25:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:25:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:25:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:25:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:25:42Z"}
10.1.75.1 - - [05/Mar/2020:17:25:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:25:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:25:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:26:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:26:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:26:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:26:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:26:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:26:42Z"}
10.1.75.1 - - [05/Mar/2020:17:26:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:26:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:26:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:27:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:27:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:27:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:27:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:27:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:27:42Z"}
10.1.75.1 - - [05/Mar/2020:17:27:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:27:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:27:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:28:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:28:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:28:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:28:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:28:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:28:42Z"}
10.1.75.1 - - [05/Mar/2020:17:28:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:28:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:28:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:29:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:29:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:29:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:29:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:29:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:29:42Z"}
10.1.75.1 - - [05/Mar/2020:17:29:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:29:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:29:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:30:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:30:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:30:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:30:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:30:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:30:42Z"}
10.1.75.1 - - [05/Mar/2020:17:30:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:30:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:30:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:31:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:31:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:31:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:31:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:31:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:31:42Z"}
10.1.75.1 - - [05/Mar/2020:17:31:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:31:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:31:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:32:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:32:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:32:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:32:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:32:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:32:42Z"}
10.1.75.1 - - [05/Mar/2020:17:32:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:32:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:32:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:33:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:33:13 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:33:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:33:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:33:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:33:42Z"}
10.1.75.1 - - [05/Mar/2020:17:33:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:33:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:33:57 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:34:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:34:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:34:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:34:27 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:34:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:34:42Z"}
10.1.75.1 - - [05/Mar/2020:17:34:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:34:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:34:58 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:35:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:35:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:35:22 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:35:28 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:35:32 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
{"level":"error","msg":"Error scraping node metrics: the server could not find the requested resource (get nodes.metrics.k8s.io)","time":"2020-03-05T17:35:42Z"}
10.1.75.1 - - [05/Mar/2020:17:35:42 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:35:52 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:35:58 +0000] "GET /healthz HTTP/1.1" 200 13 "" "dashboard/v2.0.0-beta5"
10.1.75.1 - - [05/Mar/2020:17:36:02 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
10.1.75.1 - - [05/Mar/2020:17:36:12 +0000] "GET / HTTP/1.1" 200 6 "" "kube-probe/1.17"
==== END logs for container dashboard-metrics-scraper of pod kube-system/dashboard-metrics-scraper-687667bb6c-vn9dd ====
==== START logs for container heapster of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
I0305 17:18:40.146353       1 heapster.go:78] /heapster --source=kubernetes.summary_api:'' --sink=influxdb:http://monitoring-influxdb:8086
I0305 17:18:40.146397       1 heapster.go:79] Heapster version v1.5.2
I0305 17:18:40.146729       1 configs.go:61] Using Kubernetes client with master "https://10.152.183.1:443" and version v1
I0305 17:18:40.146751       1 configs.go:62] Using kubelet port 10255
E0305 17:18:41.151645       1 influxdb.go:297] issues while creating an InfluxDB sink: failed to ping InfluxDB server at "monitoring-influxdb:8086" - Get http://monitoring-influxdb:8086/ping: dial tcp 10.152.183.24:8086: getsockopt: connection refused, will retry on use
I0305 17:18:41.151671       1 influxdb.go:312] created influxdb sink with options: host:monitoring-influxdb:8086 user:root db:k8s
I0305 17:18:41.151686       1 heapster.go:202] Starting with InfluxDB Sink
I0305 17:18:41.151690       1 heapster.go:202] Starting with Metric Sink
I0305 17:18:41.158492       1 heapster.go:112] Starting heapster on port 8082
I0305 17:19:05.066338       1 influxdb.go:274] Created database "k8s" on influxDB server at "monitoring-influxdb:8086"
==== END logs for container heapster of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
==== START logs for container eventer of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
I0305 17:18:40.389162       1 eventer.go:68] /eventer --source=kubernetes:'' --sink=influxdb:http://monitoring-influxdb:8086
I0305 17:18:40.389219       1 eventer.go:69] Eventer version v1.5.2
E0305 17:18:41.407654       1 influxdb.go:233] issues while creating an InfluxDB sink: failed to ping InfluxDB server at "monitoring-influxdb:8086" - Get http://monitoring-influxdb:8086/ping: dial tcp 10.152.183.24:8086: getsockopt: connection refused, will retry on use
I0305 17:18:41.407679       1 influxdb.go:247] created influxdb sink with options: host:monitoring-influxdb:8086 user:root db:k8s
I0305 17:18:41.407688       1 eventer.go:95] Starting with InfluxDB Sink sink
I0305 17:18:41.407700       1 eventer.go:109] Starting eventer
I0305 17:18:41.407708       1 eventer.go:117] Starting eventer http service
I0305 17:19:00.000264       1 manager.go:100] Exporting 12 events
I0305 17:19:00.014679       1 influxdb.go:209] Created database "k8s" on influxDB server at "monitoring-influxdb:8086"
I0305 17:19:30.000229       1 manager.go:100] Exporting 0 events
I0305 17:20:00.000244       1 manager.go:100] Exporting 0 events
I0305 17:20:30.000237       1 manager.go:100] Exporting 0 events
I0305 17:21:00.000271       1 manager.go:100] Exporting 0 events
I0305 17:21:30.000242       1 manager.go:100] Exporting 10 events
I0305 17:22:00.000208       1 manager.go:100] Exporting 0 events
I0305 17:22:30.000211       1 manager.go:100] Exporting 0 events
I0305 17:23:00.000233       1 manager.go:100] Exporting 0 events
I0305 17:23:30.000211       1 manager.go:100] Exporting 0 events
I0305 17:24:00.000208       1 manager.go:100] Exporting 0 events
I0305 17:24:30.000221       1 manager.go:100] Exporting 0 events
I0305 17:25:00.000226       1 manager.go:100] Exporting 0 events
I0305 17:25:30.000222       1 manager.go:100] Exporting 0 events
I0305 17:26:00.000224       1 manager.go:100] Exporting 0 events
I0305 17:26:30.000224       1 manager.go:100] Exporting 0 events
I0305 17:27:00.000258       1 manager.go:100] Exporting 0 events
I0305 17:27:30.000237       1 manager.go:100] Exporting 0 events
I0305 17:28:00.000278       1 manager.go:100] Exporting 0 events
I0305 17:28:30.000239       1 manager.go:100] Exporting 0 events
I0305 17:29:00.000235       1 manager.go:100] Exporting 0 events
I0305 17:29:30.000204       1 manager.go:100] Exporting 0 events
I0305 17:30:00.000209       1 manager.go:100] Exporting 0 events
I0305 17:30:30.000205       1 manager.go:100] Exporting 0 events
I0305 17:31:00.000256       1 manager.go:100] Exporting 0 events
I0305 17:31:30.000246       1 manager.go:100] Exporting 0 events
I0305 17:32:00.000227       1 manager.go:100] Exporting 0 events
I0305 17:32:30.000228       1 manager.go:100] Exporting 8 events
I0305 17:33:00.000215       1 manager.go:100] Exporting 6 events
I0305 17:33:30.000247       1 manager.go:100] Exporting 0 events
I0305 17:34:00.000240       1 manager.go:100] Exporting 0 events
I0305 17:34:30.000249       1 manager.go:100] Exporting 17 events
I0305 17:35:00.000238       1 manager.go:100] Exporting 0 events
I0305 17:35:30.000234       1 manager.go:100] Exporting 0 events
I0305 17:36:00.000508       1 manager.go:100] Exporting 0 events
==== END logs for container eventer of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
==== START logs for container heapster-nanny of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
ERROR: logging before flag.Parse: I0305 17:18:50.332932       1 pod_nanny.go:64] Invoked by [/pod_nanny --config-dir=/etc/config --cpu=80m --extra-cpu=0.5m --memory=140Mi --extra-memory=4Mi --threshold=5 --deployment=heapster-v1.5.2 --container=heapster --poll-period=300000 --estimator=exponential]
ERROR: logging before flag.Parse: I0305 17:18:50.333032       1 pod_nanny.go:76] Watching namespace: kube-system, pod: heapster-v1.5.2-5c58f64f8b-b95x9, container: heapster.
ERROR: logging before flag.Parse: I0305 17:18:50.333039       1 pod_nanny.go:77] storage: MISSING, extra_storage: 0Gi
ERROR: logging before flag.Parse: I0305 17:18:50.334291       1 pod_nanny.go:166] MISSING
ERROR: logging before flag.Parse: I0305 17:18:50.334372       1 pod_nanny.go:101] cpu: 80m, extra_cpu: 0.5m, memory: 140Mi, extra_memory: 4Mi
ERROR: logging before flag.Parse: I0305 17:18:50.334388       1 pod_nanny.go:130] Resources: [{Base:{i:{value:80 scale:-3} d:{Dec:<nil>} s:80m Format:DecimalSI} ExtraPerNode:{i:{value:5 scale:-4} d:{Dec:<nil>} s: Format:DecimalSI} Name:cpu} {Base:{i:{value:146800640 scale:0} d:{Dec:<nil>} s:140Mi Format:BinarySI} ExtraPerNode:{i:{value:4194304 scale:0} d:{Dec:<nil>} s:4Mi Format:BinarySI} Name:memory}]
ERROR: logging before flag.Parse: I0305 17:18:52.835623       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e6d50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7350} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e6d50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7350} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:18:52.934029       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:02.937016       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dab40} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db5c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dab40} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db5c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:02.937754       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:12.940785       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277950} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277f50} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277950} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277f50} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:12.941808       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:22.944786       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4203004b0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420429680} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420429680} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203004b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:22.945528       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:32.948398       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c540} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c9c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c540} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c9c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:32.949169       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:42.952011       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1080} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1500} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1080} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1500} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:42.952745       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:52.955410       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029db60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420230030} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029db60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420230030} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:52.956209       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:02.959365       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026cd80} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d260} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026cd80} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d260} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:02.960150       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:12.963104       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231560} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420231a40} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420231a40} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420231560} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:20:12.963825       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:22.966887       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6840} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6840} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:22.967837       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:32.970817       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7c50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018e1b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7c50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018e1b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:32.971628       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:42.974644       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fb2c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fb770} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fb2c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fb770} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:42.975399       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:52.978845       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42018e9c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018ef30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42018e9c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018ef30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:52.979709       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:02.982536       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e71a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7890} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7890} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e71a0} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:21:02.983299       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:12.986243       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428900} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429380} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428900} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429380} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:12.986889       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:22.989710       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dafc0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db8f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dafc0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db8f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:22.990297       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:32.993266       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420300270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420300810} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420300270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420300810} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:32.993858       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:42.996709       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029cb40} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029cff0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029cb40} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029cff0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:42.997323       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:53.000420       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c0c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c570} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c0c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c570} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:53.001024       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:03.004084       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1350} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d17d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1350} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d17d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:03.004727       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:13.007903       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230e10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420231320} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230e10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420231320} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:13.008749       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:23.011778       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026de90} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6330} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026de90} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6330} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:23.012579       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:33.015759       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7350} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c77d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7350} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c77d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:33.016568       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:43.020207       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fac60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fb110} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201fb110} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fac60} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:22:43.021152       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:53.025607       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42018e9c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018ee70} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42018e9c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018ee70} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:53.026342       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:03.029534       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6c30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7140} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6c30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7140} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:03.030380       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:13.033615       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202301b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202306c0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202306c0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4202301b0} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:23:13.034408       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:23.037363       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c630} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cae0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c630} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cae0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:23.038166       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:33.041466       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231a10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420231ec0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231a10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420231ec0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:33.042129       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:43.044966       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029cea0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d320} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029cea0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d320} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:43.045605       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:53.048485       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d02d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0750} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d02d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0750} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:53.049093       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:03.052081       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42032c270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203dade0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42032c270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203dade0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:03.052784       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:13.055837       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420404b40} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204059b0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4204059b0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420404b40} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:24:13.056599       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:23.059748       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420429680} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420450990} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420429680} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420450990} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:23.060350       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:33.063081       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277770} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277cb0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277770} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277cb0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:33.063807       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:43.066614       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e7620} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7e30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e7620} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7e30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:43.067301       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:53.132211       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420164a20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164ed0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420164a20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164ed0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:53.133045       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:03.135958       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e63f0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e6cf0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e63f0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e6cf0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:03.136753       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:13.139757       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428450} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428bd0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428450} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428bd0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:13.140527       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:23.143582       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203db7a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203dbef0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203db7a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203dbef0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:23.144293       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:33.147514       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420405980} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0090} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420405980} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0090} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:33.148210       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:43.151171       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d10b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1530} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d10b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1530} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:43.152023       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:53.155282       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026d3e0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42026ced0} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026ced0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d3e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:53.156103       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:03.158982       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230960} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420230e40} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230960} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420230e40} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:03.159637       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:13.162530       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231f50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c63f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231f50} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c63f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:13.163271       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:23.166186       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d0b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d530} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d0b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d530} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:23.166989       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:33.170180       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277290} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202778c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277290} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202778c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:33.170888       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:43.173583       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7800} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7800} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:43.174322       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:53.178119       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42018f2f0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018f770} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018f770} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42018f2f0} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:26:53.178933       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:03.182062       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420276c90} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202775c0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202775c0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420276c90} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:27:03.182723       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:13.185596       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c67e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6c60} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c67e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6c60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:13.186399       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:23.189385       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201653e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420165920} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201653e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420165920} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:23.190283       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:33.193425       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202308d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202308d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:33.194241       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:43.197137       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026ccc0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c7e0} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c7e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026ccc0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:43.198009       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:53.201051       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026de30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c2d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026de30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c2d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:53.201712       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:03.204789       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d0480} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0900} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d0480} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0900} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:03.205677       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:13.209121       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42032c0c0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4203007e0} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203007e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42032c0c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:13.209832       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:23.212880       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420404690} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204056b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420404690} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204056b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:23.213675       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:33.216643       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420429200} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429860} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420429200} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429860} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:33.217337       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:43.220305       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029db60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e60c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029db60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e60c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:43.221035       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:53.224089       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa4b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201faa20} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa4b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201faa20} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:53.224695       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:03.227897       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4204296b0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420428e70} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428e70} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204296b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:03.228602       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:13.231313       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dad20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db6e0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203dad20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db6e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:13.232162       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:23.234981       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203008a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0090} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203008a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d0090} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:23.235746       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:33.238498       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d10b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1530} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d10b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1530} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:33.239166       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:43.242409       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d260} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d740} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d260} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029d740} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:43.243234       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:53.246352       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420230d20} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420230810} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230810} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420230d20} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:53.247067       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:03.249982       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026cf00} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d410} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026cf00} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d410} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:03.250799       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:13.253775       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6690} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6210} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6210} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6690} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:13.254410       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:23.257350       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7800} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c7800} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:30:23.258051       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:33.266913       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277b00} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164120} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420277b00} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164120} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:33.267536       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:43.270548       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e71a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7890} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e71a0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e7890} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:43.271198       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:53.274422       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa810} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201facc0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa810} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201facc0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:53.275331       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:03.279659       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420276f60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277770} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420276f60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420277770} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:03.280379       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:13.283357       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c71d0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6cc0} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6cc0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c71d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:13.284083       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:23.287266       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c330} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c7e0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c330} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c7e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:23.288009       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:33.291314       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202314d0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc420230f60} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230f60} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202314d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:33.292183       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:43.295429       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42029c960} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c4e0} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c4e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c960} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:43.296335       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:53.299255       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42029dce0} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d830} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029d830} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029dce0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:53.299943       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:03.303238       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1110} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1590} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202d1590} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d1110} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:32:03.304084       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:13.307003       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420382ae0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203daf90} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420382ae0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203daf90} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:13.307790       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:23.310843       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428c30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204295c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428c30} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204295c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:23.311697       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:33.314732       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e62d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e69f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e62d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e69f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:33.315406       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:43.318260       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa480} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fa9f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fa480} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fa9f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:43.318885       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:53.321826       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201641e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201646c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201641e0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201646c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:53.322636       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:03.332016       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e6e10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e73e0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203e6e10} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203e73e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:03.332708       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:14.942297       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428930} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204293b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420428930} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204293b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:15.000534       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:25.004703       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4203db590} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203dbc80} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4203dbc80} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4203db590} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:33:25.005651       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:35.009318       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d0270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d06f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202d0270} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202d06f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:35.010303       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:45.013650       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c510} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c990} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029c510} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c990} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:45.014566       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:55.018935       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029dcb0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c1b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42029dcb0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c1b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:55.019805       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:05.023193       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026d530} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026da40} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026d530} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026da40} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:05.024063       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:15.029924       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c62d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6750} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c62d0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6750} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:15.030807       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:25.035159       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230db0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202312c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420230db0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202312c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:25.036140       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:35.040076       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202764b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420276b70} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202764b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420276b70} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:35.040806       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:45.044410       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420164390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164870} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420164390} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420164870} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:45.045212       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:55.048539       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420165f20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fa3f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420165f20} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fa3f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:55.049798       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:05.232284       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fb650} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201fbb00} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201fbb00} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc4201fb650} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:35:05.234913       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:15.238446       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420276cf0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202775f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420276cf0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202775f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:15.239159       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:25.242563       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6930} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6de0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201c6930} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6de0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:25.243246       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:35.245907       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201658c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420165d40} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4201658c0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420165d40} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:35.246749       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:45.249842       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202301b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202306c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc4202301b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202306c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:45.250624       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:55.253662       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c4b0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c930} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026c930} s: Format:BinarySI} cpu:{i:{value:0 scale:0} d:{Dec:0xc42026c4b0} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:35:55.254411       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:36:05.257482       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231bf0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c0c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:0 scale:0} d:{Dec:0xc420231bf0} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c0c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:36:05.263375       1 nanny_lib.go:110] the server could not find the requested resource
==== END logs for container heapster-nanny of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
==== START logs for container eventer-nanny of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
ERROR: logging before flag.Parse: I0305 17:18:50.534804       1 pod_nanny.go:64] Invoked by [/pod_nanny --config-dir=/etc/config --cpu=100m --extra-cpu=0m --memory=190Mi --extra-memory=500Ki --threshold=5 --deployment=heapster-v1.5.2 --container=eventer --poll-period=300000 --estimator=exponential]
ERROR: logging before flag.Parse: I0305 17:18:50.535176       1 pod_nanny.go:76] Watching namespace: kube-system, pod: heapster-v1.5.2-5c58f64f8b-b95x9, container: eventer.
ERROR: logging before flag.Parse: I0305 17:18:50.535297       1 pod_nanny.go:77] storage: MISSING, extra_storage: 0Gi
ERROR: logging before flag.Parse: I0305 17:18:50.631690       1 pod_nanny.go:166] MISSING
ERROR: logging before flag.Parse: I0305 17:18:50.631737       1 pod_nanny.go:101] cpu: 100m, extra_cpu: 0m, memory: 190Mi, extra_memory: 500Ki
ERROR: logging before flag.Parse: I0305 17:18:50.631752       1 pod_nanny.go:130] Resources: [{Base:{i:{value:100 scale:-3} d:{Dec:<nil>} s:100m Format:DecimalSI} ExtraPerNode:{i:{value:0 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} Name:cpu} {Base:{i:{value:199229440 scale:0} d:{Dec:<nil>} s:190Mi Format:BinarySI} ExtraPerNode:{i:{value:512000 scale:0} d:{Dec:<nil>} s:500Ki Format:BinarySI} Name:memory}]
ERROR: logging before flag.Parse: I0305 17:18:53.033124       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c540} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c540} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:18:53.034108       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:03.036893       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42032c360} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42032c360} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:03.037580       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:13.040135       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ceed0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ceed0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:13.040818       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:23.043346       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428330} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428330} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:23.044120       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:33.046716       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c5d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c5d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:33.047350       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:43.050000       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fb5c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fb5c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:43.050732       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:19:53.053469       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022ee10} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022ee10} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:19:53.054197       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:03.057069       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026dc20} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026dc20} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:20:03.057774       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:13.060164       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6420} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6420} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:13.060825       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:23.063647       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f96b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f96b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:23.064292       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:33.066883       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018ea80} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018ea80} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:33.067703       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:43.070534       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fbc0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018fbc0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:20:43.071379       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:20:53.073907       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7cb0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:20:53.074722       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:03.132149       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420166b10} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166b10} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:03.133075       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:13.135760       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c180} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c180} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:13.136468       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:23.139013       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429b60} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429b60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:23.139744       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:33.142219       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ce180} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ce180} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:33.143016       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:43.145537       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022e810} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022e810} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:43.146260       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:21:53.148881       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022fe60} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022fe60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:21:53.149508       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:03.152354       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9080} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9080} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:03.153139       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:13.155563       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cff0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cff0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:13.156367       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:23.158986       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c66c0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c66c0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:22:23.159806       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:33.162320       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb40} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb40} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:33.163137       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:43.166429       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fa120} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fa120} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:43.167095       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:22:53.169788       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7ce0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7ce0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:22:53.170544       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:03.232685       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:03.233452       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:13.236012       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166d80} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166d80} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:13.236706       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:23.239241       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018e240} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018e240} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:23.239973       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:33.242456       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018f6b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018f6b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:33.243167       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:43.245863       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6510} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6510} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:43.246559       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:23:53.249224       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c72f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c72f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:23:53.250039       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:03.252829       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9920} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9920} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:03.253632       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:13.256581       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c960} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c960} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:13.257344       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:23.260038       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026dec0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026dec0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:24:23.260791       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:33.263349       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204280c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204280c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:33.264130       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:43.266829       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029cf90} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029cf90} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:43.267537       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:24:53.270202       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5410} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5410} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:24:53.270999       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:03.275025       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:03.275799       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:13.278462       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c180} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42029c180} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:25:13.279131       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:23.282054       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420428f30} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428f30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:23.282772       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:33.285323       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202ceba0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ceba0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:33.286095       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:43.288694       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8510} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8510} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:43.289311       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:25:53.292049       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d260} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d260} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:25:53.292787       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:03.295311       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6900} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6900} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:03.296086       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:13.298635       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9b30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9b30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:13.299225       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:23.302144       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018e690} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018e690} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:23.302813       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:33.305453       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5e00} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5e00} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:33.306212       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:43.308875       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201670b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201670b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:43.309688       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:26:53.312395       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136540} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136540} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:26:53.313214       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:03.332087       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166ae0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166ae0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:03.332992       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:13.336377       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42032c150} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42032c150} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:13.337358       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:23.340324       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6120} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6120} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:23.340992       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:33.344107       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7590} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7590} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:33.344929       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:43.347758       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fb30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fb30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:43.348663       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:27:53.351633       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9170} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9170} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:27:53.352523       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:03.355121       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026ce40} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026ce40} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:03.355971       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:13.359567       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202cf260} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202cf260} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:13.360633       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:23.363737       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429470} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420429470} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:28:23.364596       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:33.368472       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db110} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db110} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:33.369242       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:43.372076       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fa660} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202fa660} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:28:43.379601       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:28:53.382571       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136d80} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136d80} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:28:53.383249       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:03.432195       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fac30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:03.433091       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:13.435810       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166ae0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420166ae0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:13.436692       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:23.439687       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db290} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203db290} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:23.440937       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:33.443864       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420428990} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc420428990} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:29:33.444498       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:43.447600       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420405f80} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420405f80} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:43.448416       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:29:53.450969       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f81e0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f81e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:29:53.451715       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:03.455936       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f97a0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f97a0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:03.457815       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:13.460796       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cea0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cea0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:13.461429       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:23.464614       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026de60} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026de60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:23.465366       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:33.468529       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201c75c0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c75c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:33.469407       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:43.472089       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018f3b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018f3b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:43.472744       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:30:53.475636       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201361b0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201361b0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:30:53.476395       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:03.480075       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb70} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb70} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:03.480870       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:13.484985       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fd70} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fd70} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:13.485739       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:23.488615       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6540} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c6540} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:23.489583       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:33.492175       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fb5f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202fb5f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:33.492881       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:43.495526       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7b30} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c7b30} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:43.496250       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:31:53.499136       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c8a0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026c8a0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:31:53.499839       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:03.502459       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f95c0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4201f95c0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:32:03.503254       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:13.506018       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ce5d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202ce5d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:13.506832       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:23.509653       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429e00} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420429e00} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:23.510442       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:33.513129       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203da120} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4203da120} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:32:33.513784       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:43.516719       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201666f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201666f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:43.517400       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:32:53.520039       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136f90} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc420136f90} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:32:53.520594       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:03.524745       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb70} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018eb70} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:03.525377       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:14.976914       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c3c0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42029c3c0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:15.002338       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:25.004781       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42018fce0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42018fce0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:33:25.006013       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:35.008500       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204054d0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4204054d0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:35.009628       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:45.013581       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026cb70} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026cb70} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:33:45.014820       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:33:55.018268       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8240} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8240} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:33:55.019675       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:05.024628       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9740} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9740} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:05.025305       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:15.029159       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5170} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5170} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:15.031971       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:25.035159       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202faba0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202faba0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:34:25.036619       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:35.040818       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c73e0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201c73e0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:35.041394       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:45.045590       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201666f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201666f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:45.046521       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:34:55.049875       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201366f0} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201366f0} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:34:55.050435       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:05.233228       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42022e090} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42022e090} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:05.234193       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:15.237713       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[memory:{i:{value:0 scale:0} d:{Dec:0xc4202faf60} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202faf60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:15.238782       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:25.242011       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5440} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4203a5440} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:25.242837       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:35.251919       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8c00} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f8c00} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:35.252612       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:45.254724       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9b60} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4201f9b60} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:35:45.255475       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:35:55.257809       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc42026d0b0} s: Format:BinarySI}] Requests:map[memory:{i:{value:0 scale:0} d:{Dec:0xc42026d0b0} s: Format:BinarySI} cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI}]}
ERROR: logging before flag.Parse: E0305 17:35:55.258509       1 nanny_lib.go:110] the server could not find the requested resource
ERROR: logging before flag.Parse: I0305 17:36:05.265416       1 nanny_lib.go:108] Resources are not within the expected limits, updating the deployment. Actual: {Limits:map[] Requests:map[]} Expected: {Limits:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202cf260} s: Format:BinarySI}] Requests:map[cpu:{i:{value:100 scale:-3} d:{Dec:<nil>} s: Format:DecimalSI} memory:{i:{value:0 scale:0} d:{Dec:0xc4202cf260} s: Format:BinarySI}]}
ERROR: logging before flag.Parse: E0305 17:36:05.266093       1 nanny_lib.go:110] the server could not find the requested resource
==== END logs for container eventer-nanny of pod kube-system/heapster-v1.5.2-5c58f64f8b-b95x9 ====
==== START logs for container hostpath-provisioner of pod kube-system/hostpath-provisioner-7b9cb5cdb4-b9xbq ====
I0305 17:17:09.617741       1 controller.go:293] Starting provisioner controller 2575d584-5f05-11ea-a27d-16063b141562!
==== END logs for container hostpath-provisioner of pod kube-system/hostpath-provisioner-7b9cb5cdb4-b9xbq ====
==== START logs for container kubernetes-dashboard of pod kube-system/kubernetes-dashboard-5bc7684475-ck8cc ====
2020/03/05 17:21:27 Using namespace: kube-system
2020/03/05 17:21:27 Using in-cluster config to connect to apiserver
2020/03/05 17:21:27 Starting overwatch
2020/03/05 17:21:27 Using secret token for csrf signing
2020/03/05 17:21:27 Initializing csrf token from kubernetes-dashboard-csrf secret
2020/03/05 17:21:27 Successful initial request to the apiserver, version: v1.17.3
2020/03/05 17:21:27 Generating JWE encryption key
2020/03/05 17:21:27 New synchronizer has been registered: kubernetes-dashboard-key-holder-kube-system. Starting
2020/03/05 17:21:27 Starting secret synchronizer for kubernetes-dashboard-key-holder in namespace kube-system
2020/03/05 17:21:27 Initializing JWE encryption key from synchronized object
2020/03/05 17:21:27 Creating in-cluster Sidecar client
2020/03/05 17:21:27 Auto-generating certificates
2020/03/05 17:21:27 Successfully created certificates
2020/03/05 17:21:27 Serving securely on HTTPS port: 8443
2020/03/05 17:21:27 Successful request to sidecar
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Incoming HTTP/2.0 GET /api/v1/settings/global/cani request from 10.1.75.1:34190: 
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Incoming HTTP/2.0 GET /api/v1/settings/pinner request from 10.1.75.1:34190: 
2020/03/05 17:22:38 Getting application global configuration
2020/03/05 17:22:38 Application configuration {"serverTime":1583428958934}
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Incoming HTTP/2.0 GET /api/v1/plugin/config request from 10.1.75.1:34190: 
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Incoming HTTP/2.0 GET /api/v1/settings/global/cani request from 10.1.75.1:34190: 
2020/03/05 17:22:38 [2020-03-05T17:22:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/modes request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/skippable request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/settings/global/cani request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/settings/pinner request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 Getting application global configuration
2020/03/05 17:22:39 Application configuration {"serverTime":1583428959361}
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/plugin/config request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/settings/global/cani request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:39 [2020-03-05T17:22:39Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:40 [2020-03-05T17:22:40Z] Incoming HTTP/2.0 GET /api/v1/login/modes request from 10.1.75.1:34190: 
2020/03/05 17:22:40 [2020-03-05T17:22:40Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:40 [2020-03-05T17:22:40Z] Incoming HTTP/2.0 GET /api/v1/login/skippable request from 10.1.75.1:34190: 
2020/03/05 17:22:40 [2020-03-05T17:22:40Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Incoming HTTP/2.0 GET /api/v1/systembanner request from 10.1.75.1:34190: 
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:44 [2020-03-05T17:22:44Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:45 [2020-03-05T17:22:45Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:22:45 [2020-03-05T17:22:45Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of namespaces
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/cronjob/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all cron jobs in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/daemonset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/deployment/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all deployments in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/job/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all jobs in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/pod/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all pods in the cluster
2020/03/05 17:22:47 Getting pod metrics
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/replicationcontroller/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all replication controllers in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/statefulset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all pet sets in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/replicaset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all replica sets in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/service/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of all services in the cluster
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/configmap/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list config maps in the namespace default
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/persistentvolumeclaim/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list persistent volumes claims
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Incoming HTTP/2.0 GET /api/v1/secret/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:47 Getting list of secrets in &{[default]} namespace
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:47 [2020-03-05T17:22:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of namespaces
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/cronjob/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all cron jobs in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/daemonset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/deployment/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all deployments in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/job/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all jobs in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/replicaset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all replica sets in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/replicationcontroller/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all replication controllers in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/pod/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all pods in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/statefulset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all pet sets in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting pod metrics
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/service/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of all services in the cluster
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/persistentvolumeclaim/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list persistent volumes claims
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/secret/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list of secrets in &{[default]} namespace
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Incoming HTTP/2.0 GET /api/v1/configmap/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:52 Getting list config maps in the namespace default
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:52 [2020-03-05T17:22:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of namespaces
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/cronjob/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all cron jobs in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/daemonset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/deployment/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all deployments in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/job/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all jobs in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/pod/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all pods in the cluster
2020/03/05 17:22:57 Getting pod metrics
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/replicaset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all replica sets in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/replicationcontroller/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all replication controllers in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/statefulset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all pet sets in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/service/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of all services in the cluster
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/configmap/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list config maps in the namespace default
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/persistentvolumeclaim/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list persistent volumes claims
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Incoming HTTP/2.0 GET /api/v1/secret/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:22:57 Getting list of secrets in &{[default]} namespace
2020/03/05 17:22:57 [2020-03-05T17:22:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of namespaces
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/cronjob/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all cron jobs in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/daemonset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/deployment/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all deployments in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/job/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all jobs in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/pod/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all pods in the cluster
2020/03/05 17:23:02 Getting pod metrics
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/replicaset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all replica sets in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/replicationcontroller/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all replication controllers in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/statefulset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all pet sets in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/service/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of all services in the cluster
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/persistentvolumeclaim/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list persistent volumes claims
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/configmap/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list config maps in the namespace default
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Incoming HTTP/2.0 GET /api/v1/secret/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:02 Getting list of secrets in &{[default]} namespace
2020/03/05 17:23:02 [2020-03-05T17:23:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of namespaces
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/cronjob/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all cron jobs in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/daemonset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/deployment/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all deployments in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/job/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all jobs in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/pod/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all pods in the cluster
2020/03/05 17:23:07 Getting pod metrics
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/replicationcontroller/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all replication controllers in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/replicaset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all replica sets in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/statefulset/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all pet sets in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/secret/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of secrets in &{[default]} namespace
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/configmap/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list config maps in the namespace default
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/service/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list of all services in the cluster
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/persistentvolumeclaim/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:07 Getting list persistent volumes claims
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Incoming HTTP/2.0 GET /api/v1/login/status request from 10.1.75.1:34190: 
2020/03/05 17:23:07 [2020-03-05T17:23:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:08 [2020-03-05T17:23:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:08 [2020-03-05T17:23:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:12 [2020-03-05T17:23:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:12 Getting list of namespaces
2020/03/05 17:23:12 [2020-03-05T17:23:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:13 [2020-03-05T17:23:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:13 [2020-03-05T17:23:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:17 [2020-03-05T17:23:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:17 Getting list of namespaces
2020/03/05 17:23:17 [2020-03-05T17:23:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:18 [2020-03-05T17:23:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:18 [2020-03-05T17:23:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:22 [2020-03-05T17:23:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:22 Getting list of namespaces
2020/03/05 17:23:22 [2020-03-05T17:23:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:23 [2020-03-05T17:23:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:23 [2020-03-05T17:23:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:27 [2020-03-05T17:23:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:27 Getting list of namespaces
2020/03/05 17:23:27 [2020-03-05T17:23:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:28 [2020-03-05T17:23:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:28 [2020-03-05T17:23:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:32 [2020-03-05T17:23:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:32 Getting list of namespaces
2020/03/05 17:23:32 [2020-03-05T17:23:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:33 [2020-03-05T17:23:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:33 [2020-03-05T17:23:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:37 [2020-03-05T17:23:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:37 Getting list of namespaces
2020/03/05 17:23:37 [2020-03-05T17:23:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:38 [2020-03-05T17:23:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:38 [2020-03-05T17:23:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:42 [2020-03-05T17:23:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:42 Getting list of namespaces
2020/03/05 17:23:42 [2020-03-05T17:23:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:43 [2020-03-05T17:23:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:43 [2020-03-05T17:23:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:47 [2020-03-05T17:23:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:47 Getting list of namespaces
2020/03/05 17:23:47 [2020-03-05T17:23:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:48 [2020-03-05T17:23:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:48 [2020-03-05T17:23:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:52 [2020-03-05T17:23:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:52 Getting list of namespaces
2020/03/05 17:23:52 [2020-03-05T17:23:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:53 [2020-03-05T17:23:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:53 [2020-03-05T17:23:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:57 [2020-03-05T17:23:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:23:57 Getting list of namespaces
2020/03/05 17:23:57 [2020-03-05T17:23:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:23:58 [2020-03-05T17:23:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:23:58 [2020-03-05T17:23:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:02 [2020-03-05T17:24:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:02 Getting list of namespaces
2020/03/05 17:24:02 [2020-03-05T17:24:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:03 [2020-03-05T17:24:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:03 [2020-03-05T17:24:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:07 [2020-03-05T17:24:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:07 Getting list of namespaces
2020/03/05 17:24:07 [2020-03-05T17:24:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:08 [2020-03-05T17:24:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:08 [2020-03-05T17:24:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:12 [2020-03-05T17:24:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:12 Getting list of namespaces
2020/03/05 17:24:12 [2020-03-05T17:24:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:13 [2020-03-05T17:24:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:13 [2020-03-05T17:24:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:17 [2020-03-05T17:24:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:17 Getting list of namespaces
2020/03/05 17:24:17 [2020-03-05T17:24:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:18 [2020-03-05T17:24:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:18 [2020-03-05T17:24:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:22 [2020-03-05T17:24:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:22 Getting list of namespaces
2020/03/05 17:24:22 [2020-03-05T17:24:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:23 [2020-03-05T17:24:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:23 [2020-03-05T17:24:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:27 [2020-03-05T17:24:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:27 Getting list of namespaces
2020/03/05 17:24:27 [2020-03-05T17:24:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:28 [2020-03-05T17:24:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:28 [2020-03-05T17:24:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:32 [2020-03-05T17:24:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:32 Getting list of namespaces
2020/03/05 17:24:32 [2020-03-05T17:24:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:33 [2020-03-05T17:24:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:33 [2020-03-05T17:24:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:37 [2020-03-05T17:24:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:37 Getting list of namespaces
2020/03/05 17:24:37 [2020-03-05T17:24:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:38 [2020-03-05T17:24:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:38 [2020-03-05T17:24:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:42 [2020-03-05T17:24:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:42 Getting list of namespaces
2020/03/05 17:24:42 [2020-03-05T17:24:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:43 [2020-03-05T17:24:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:43 [2020-03-05T17:24:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:47 [2020-03-05T17:24:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:47 Getting list of namespaces
2020/03/05 17:24:47 [2020-03-05T17:24:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:48 [2020-03-05T17:24:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:48 [2020-03-05T17:24:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:52 [2020-03-05T17:24:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:52 Getting list of namespaces
2020/03/05 17:24:52 [2020-03-05T17:24:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:53 [2020-03-05T17:24:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:53 [2020-03-05T17:24:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:57 [2020-03-05T17:24:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:24:57 Getting list of namespaces
2020/03/05 17:24:57 [2020-03-05T17:24:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:24:58 [2020-03-05T17:24:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:24:58 [2020-03-05T17:24:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:02 [2020-03-05T17:25:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:02 Getting list of namespaces
2020/03/05 17:25:02 [2020-03-05T17:25:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:03 [2020-03-05T17:25:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:03 [2020-03-05T17:25:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:07 [2020-03-05T17:25:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:07 Getting list of namespaces
2020/03/05 17:25:07 [2020-03-05T17:25:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:08 [2020-03-05T17:25:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:08 [2020-03-05T17:25:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:12 [2020-03-05T17:25:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:12 Getting list of namespaces
2020/03/05 17:25:12 [2020-03-05T17:25:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:13 [2020-03-05T17:25:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:13 [2020-03-05T17:25:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:17 [2020-03-05T17:25:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:17 Getting list of namespaces
2020/03/05 17:25:17 [2020-03-05T17:25:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:18 [2020-03-05T17:25:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:18 [2020-03-05T17:25:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:22 [2020-03-05T17:25:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:22 Getting list of namespaces
2020/03/05 17:25:22 [2020-03-05T17:25:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:23 [2020-03-05T17:25:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:23 [2020-03-05T17:25:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:27 [2020-03-05T17:25:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:27 Getting list of namespaces
2020/03/05 17:25:27 [2020-03-05T17:25:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:28 [2020-03-05T17:25:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:28 [2020-03-05T17:25:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:32 [2020-03-05T17:25:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:32 Getting list of namespaces
2020/03/05 17:25:32 [2020-03-05T17:25:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:33 [2020-03-05T17:25:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:33 [2020-03-05T17:25:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:37 [2020-03-05T17:25:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:37 Getting list of namespaces
2020/03/05 17:25:37 [2020-03-05T17:25:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:38 [2020-03-05T17:25:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:38 [2020-03-05T17:25:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:42 [2020-03-05T17:25:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:42 Getting list of namespaces
2020/03/05 17:25:42 [2020-03-05T17:25:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:43 [2020-03-05T17:25:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:43 [2020-03-05T17:25:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:47 [2020-03-05T17:25:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:47 Getting list of namespaces
2020/03/05 17:25:47 [2020-03-05T17:25:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:48 [2020-03-05T17:25:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:48 [2020-03-05T17:25:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:52 [2020-03-05T17:25:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:52 Getting list of namespaces
2020/03/05 17:25:52 [2020-03-05T17:25:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:53 [2020-03-05T17:25:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:53 [2020-03-05T17:25:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:57 [2020-03-05T17:25:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:25:57 Getting list of namespaces
2020/03/05 17:25:57 [2020-03-05T17:25:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:25:58 [2020-03-05T17:25:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:25:58 [2020-03-05T17:25:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:02 [2020-03-05T17:26:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:02 Getting list of namespaces
2020/03/05 17:26:02 [2020-03-05T17:26:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:03 [2020-03-05T17:26:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:03 [2020-03-05T17:26:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:07 [2020-03-05T17:26:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:07 Getting list of namespaces
2020/03/05 17:26:07 [2020-03-05T17:26:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:08 [2020-03-05T17:26:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:08 [2020-03-05T17:26:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:12 [2020-03-05T17:26:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:12 Getting list of namespaces
2020/03/05 17:26:12 [2020-03-05T17:26:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:13 [2020-03-05T17:26:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:13 [2020-03-05T17:26:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:17 [2020-03-05T17:26:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:17 Getting list of namespaces
2020/03/05 17:26:17 [2020-03-05T17:26:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:18 [2020-03-05T17:26:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:18 [2020-03-05T17:26:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:22 [2020-03-05T17:26:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:22 Getting list of namespaces
2020/03/05 17:26:22 [2020-03-05T17:26:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:23 [2020-03-05T17:26:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:23 [2020-03-05T17:26:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:27 [2020-03-05T17:26:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:27 Getting list of namespaces
2020/03/05 17:26:27 [2020-03-05T17:26:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:28 [2020-03-05T17:26:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:28 [2020-03-05T17:26:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:32 [2020-03-05T17:26:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:32 Getting list of namespaces
2020/03/05 17:26:32 [2020-03-05T17:26:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:33 [2020-03-05T17:26:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:33 [2020-03-05T17:26:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:37 [2020-03-05T17:26:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:37 Getting list of namespaces
2020/03/05 17:26:37 [2020-03-05T17:26:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:38 [2020-03-05T17:26:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:38 [2020-03-05T17:26:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:42 [2020-03-05T17:26:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:42 Getting list of namespaces
2020/03/05 17:26:42 [2020-03-05T17:26:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:43 [2020-03-05T17:26:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:43 [2020-03-05T17:26:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:47 [2020-03-05T17:26:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:47 Getting list of namespaces
2020/03/05 17:26:47 [2020-03-05T17:26:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:48 [2020-03-05T17:26:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:48 [2020-03-05T17:26:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:52 [2020-03-05T17:26:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:52 Getting list of namespaces
2020/03/05 17:26:52 [2020-03-05T17:26:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:53 [2020-03-05T17:26:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:53 [2020-03-05T17:26:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:57 [2020-03-05T17:26:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:26:57 Getting list of namespaces
2020/03/05 17:26:57 [2020-03-05T17:26:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:26:58 [2020-03-05T17:26:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:26:58 [2020-03-05T17:26:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:02 [2020-03-05T17:27:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:02 Getting list of namespaces
2020/03/05 17:27:02 [2020-03-05T17:27:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:03 [2020-03-05T17:27:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:03 [2020-03-05T17:27:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:07 [2020-03-05T17:27:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:07 Getting list of namespaces
2020/03/05 17:27:07 [2020-03-05T17:27:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:08 [2020-03-05T17:27:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:08 [2020-03-05T17:27:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:12 [2020-03-05T17:27:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:12 Getting list of namespaces
2020/03/05 17:27:12 [2020-03-05T17:27:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:13 [2020-03-05T17:27:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:13 [2020-03-05T17:27:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:17 [2020-03-05T17:27:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:17 Getting list of namespaces
2020/03/05 17:27:17 [2020-03-05T17:27:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:18 [2020-03-05T17:27:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:18 [2020-03-05T17:27:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:22 [2020-03-05T17:27:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:22 Getting list of namespaces
2020/03/05 17:27:22 [2020-03-05T17:27:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:23 [2020-03-05T17:27:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:23 [2020-03-05T17:27:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:27 [2020-03-05T17:27:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:27 Getting list of namespaces
2020/03/05 17:27:27 [2020-03-05T17:27:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:28 [2020-03-05T17:27:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:28 [2020-03-05T17:27:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:32 [2020-03-05T17:27:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:32 Getting list of namespaces
2020/03/05 17:27:32 [2020-03-05T17:27:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:33 [2020-03-05T17:27:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:33 [2020-03-05T17:27:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:37 [2020-03-05T17:27:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:37 Getting list of namespaces
2020/03/05 17:27:37 [2020-03-05T17:27:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:38 [2020-03-05T17:27:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:38 [2020-03-05T17:27:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:42 [2020-03-05T17:27:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:42 Getting list of namespaces
2020/03/05 17:27:42 [2020-03-05T17:27:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:43 [2020-03-05T17:27:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:43 [2020-03-05T17:27:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:47 [2020-03-05T17:27:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:47 Getting list of namespaces
2020/03/05 17:27:47 [2020-03-05T17:27:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:48 [2020-03-05T17:27:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:48 [2020-03-05T17:27:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:52 [2020-03-05T17:27:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:52 Getting list of namespaces
2020/03/05 17:27:52 [2020-03-05T17:27:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:53 [2020-03-05T17:27:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:53 [2020-03-05T17:27:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:57 [2020-03-05T17:27:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:27:57 Getting list of namespaces
2020/03/05 17:27:57 [2020-03-05T17:27:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:27:58 [2020-03-05T17:27:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:27:58 [2020-03-05T17:27:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:02 [2020-03-05T17:28:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:02 Getting list of namespaces
2020/03/05 17:28:02 [2020-03-05T17:28:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:03 [2020-03-05T17:28:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:03 [2020-03-05T17:28:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:07 [2020-03-05T17:28:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:07 Getting list of namespaces
2020/03/05 17:28:07 [2020-03-05T17:28:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:08 [2020-03-05T17:28:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:08 [2020-03-05T17:28:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:12 [2020-03-05T17:28:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:12 Getting list of namespaces
2020/03/05 17:28:12 [2020-03-05T17:28:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:13 [2020-03-05T17:28:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:13 [2020-03-05T17:28:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:17 [2020-03-05T17:28:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:17 Getting list of namespaces
2020/03/05 17:28:17 [2020-03-05T17:28:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:18 [2020-03-05T17:28:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:18 [2020-03-05T17:28:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:22 [2020-03-05T17:28:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:22 Getting list of namespaces
2020/03/05 17:28:22 [2020-03-05T17:28:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:23 [2020-03-05T17:28:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:23 [2020-03-05T17:28:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:27 [2020-03-05T17:28:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:27 Getting list of namespaces
2020/03/05 17:28:27 [2020-03-05T17:28:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:28 [2020-03-05T17:28:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:28 [2020-03-05T17:28:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:32 [2020-03-05T17:28:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:32 Getting list of namespaces
2020/03/05 17:28:32 [2020-03-05T17:28:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:33 [2020-03-05T17:28:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:33 [2020-03-05T17:28:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:37 [2020-03-05T17:28:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:37 Getting list of namespaces
2020/03/05 17:28:37 [2020-03-05T17:28:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:38 [2020-03-05T17:28:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:38 [2020-03-05T17:28:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:42 [2020-03-05T17:28:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:42 Getting list of namespaces
2020/03/05 17:28:42 [2020-03-05T17:28:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:43 [2020-03-05T17:28:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:43 [2020-03-05T17:28:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:47 [2020-03-05T17:28:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:47 Getting list of namespaces
2020/03/05 17:28:47 [2020-03-05T17:28:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:48 [2020-03-05T17:28:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:48 [2020-03-05T17:28:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:52 [2020-03-05T17:28:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:52 Getting list of namespaces
2020/03/05 17:28:52 [2020-03-05T17:28:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:53 [2020-03-05T17:28:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:53 [2020-03-05T17:28:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:57 [2020-03-05T17:28:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:28:57 Getting list of namespaces
2020/03/05 17:28:57 [2020-03-05T17:28:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:28:58 [2020-03-05T17:28:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:28:58 [2020-03-05T17:28:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:02 [2020-03-05T17:29:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:02 Getting list of namespaces
2020/03/05 17:29:02 [2020-03-05T17:29:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:03 [2020-03-05T17:29:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:03 [2020-03-05T17:29:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:07 [2020-03-05T17:29:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:07 Getting list of namespaces
2020/03/05 17:29:07 [2020-03-05T17:29:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:08 [2020-03-05T17:29:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:08 [2020-03-05T17:29:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:12 [2020-03-05T17:29:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:12 Getting list of namespaces
2020/03/05 17:29:12 [2020-03-05T17:29:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:13 [2020-03-05T17:29:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:13 [2020-03-05T17:29:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:17 [2020-03-05T17:29:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:17 Getting list of namespaces
2020/03/05 17:29:17 [2020-03-05T17:29:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:18 [2020-03-05T17:29:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:18 [2020-03-05T17:29:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:22 [2020-03-05T17:29:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:22 Getting list of namespaces
2020/03/05 17:29:22 [2020-03-05T17:29:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:23 [2020-03-05T17:29:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:23 [2020-03-05T17:29:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:27 [2020-03-05T17:29:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:27 Getting list of namespaces
2020/03/05 17:29:27 [2020-03-05T17:29:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:28 [2020-03-05T17:29:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:28 [2020-03-05T17:29:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:32 [2020-03-05T17:29:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:32 Getting list of namespaces
2020/03/05 17:29:32 [2020-03-05T17:29:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:33 [2020-03-05T17:29:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:33 [2020-03-05T17:29:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:37 [2020-03-05T17:29:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:37 Getting list of namespaces
2020/03/05 17:29:37 [2020-03-05T17:29:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:38 [2020-03-05T17:29:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:38 [2020-03-05T17:29:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:42 [2020-03-05T17:29:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:42 Getting list of namespaces
2020/03/05 17:29:42 [2020-03-05T17:29:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:43 [2020-03-05T17:29:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:43 [2020-03-05T17:29:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:47 [2020-03-05T17:29:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:47 Getting list of namespaces
2020/03/05 17:29:47 [2020-03-05T17:29:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:48 [2020-03-05T17:29:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:48 [2020-03-05T17:29:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:52 [2020-03-05T17:29:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:52 Getting list of namespaces
2020/03/05 17:29:52 [2020-03-05T17:29:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:53 [2020-03-05T17:29:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:53 [2020-03-05T17:29:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:57 [2020-03-05T17:29:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:29:57 Getting list of namespaces
2020/03/05 17:29:57 [2020-03-05T17:29:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:29:58 [2020-03-05T17:29:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:29:58 [2020-03-05T17:29:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:02 [2020-03-05T17:30:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:02 Getting list of namespaces
2020/03/05 17:30:02 [2020-03-05T17:30:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:03 [2020-03-05T17:30:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:03 [2020-03-05T17:30:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:07 [2020-03-05T17:30:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:07 Getting list of namespaces
2020/03/05 17:30:07 [2020-03-05T17:30:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:08 [2020-03-05T17:30:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:08 [2020-03-05T17:30:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:12 [2020-03-05T17:30:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:12 Getting list of namespaces
2020/03/05 17:30:12 [2020-03-05T17:30:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:13 [2020-03-05T17:30:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:13 [2020-03-05T17:30:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:17 [2020-03-05T17:30:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:17 Getting list of namespaces
2020/03/05 17:30:17 [2020-03-05T17:30:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:18 [2020-03-05T17:30:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:18 [2020-03-05T17:30:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:22 [2020-03-05T17:30:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:22 Getting list of namespaces
2020/03/05 17:30:22 [2020-03-05T17:30:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:23 [2020-03-05T17:30:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:23 [2020-03-05T17:30:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:27 [2020-03-05T17:30:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:27 Getting list of namespaces
2020/03/05 17:30:27 [2020-03-05T17:30:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:28 [2020-03-05T17:30:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:28 [2020-03-05T17:30:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:32 [2020-03-05T17:30:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:32 Getting list of namespaces
2020/03/05 17:30:32 [2020-03-05T17:30:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:33 [2020-03-05T17:30:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:33 [2020-03-05T17:30:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:37 [2020-03-05T17:30:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:37 Getting list of namespaces
2020/03/05 17:30:37 [2020-03-05T17:30:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:38 [2020-03-05T17:30:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:38 [2020-03-05T17:30:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:42 [2020-03-05T17:30:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:42 Getting list of namespaces
2020/03/05 17:30:42 [2020-03-05T17:30:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:43 [2020-03-05T17:30:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:43 [2020-03-05T17:30:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:47 [2020-03-05T17:30:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:47 Getting list of namespaces
2020/03/05 17:30:47 [2020-03-05T17:30:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:48 [2020-03-05T17:30:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:48 [2020-03-05T17:30:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:52 [2020-03-05T17:30:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:52 Getting list of namespaces
2020/03/05 17:30:52 [2020-03-05T17:30:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:53 [2020-03-05T17:30:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:53 [2020-03-05T17:30:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:57 [2020-03-05T17:30:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:30:57 Getting list of namespaces
2020/03/05 17:30:57 [2020-03-05T17:30:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:30:58 [2020-03-05T17:30:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:30:58 [2020-03-05T17:30:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:02 [2020-03-05T17:31:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:02 Getting list of namespaces
2020/03/05 17:31:02 [2020-03-05T17:31:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:03 [2020-03-05T17:31:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:03 [2020-03-05T17:31:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:07 [2020-03-05T17:31:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:07 Getting list of namespaces
2020/03/05 17:31:07 [2020-03-05T17:31:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:08 [2020-03-05T17:31:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:08 [2020-03-05T17:31:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:12 [2020-03-05T17:31:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:12 Getting list of namespaces
2020/03/05 17:31:12 [2020-03-05T17:31:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:13 [2020-03-05T17:31:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:13 [2020-03-05T17:31:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:17 [2020-03-05T17:31:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:17 Getting list of namespaces
2020/03/05 17:31:17 [2020-03-05T17:31:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:18 [2020-03-05T17:31:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:18 [2020-03-05T17:31:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:22 [2020-03-05T17:31:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:22 Getting list of namespaces
2020/03/05 17:31:22 [2020-03-05T17:31:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:23 [2020-03-05T17:31:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:23 [2020-03-05T17:31:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:27 [2020-03-05T17:31:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:27 Getting list of namespaces
2020/03/05 17:31:27 [2020-03-05T17:31:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:28 [2020-03-05T17:31:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:28 [2020-03-05T17:31:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:32 [2020-03-05T17:31:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:32 Getting list of namespaces
2020/03/05 17:31:32 [2020-03-05T17:31:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:33 [2020-03-05T17:31:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:33 [2020-03-05T17:31:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:37 [2020-03-05T17:31:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:37 Getting list of namespaces
2020/03/05 17:31:37 [2020-03-05T17:31:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:38 [2020-03-05T17:31:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:38 [2020-03-05T17:31:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:42 [2020-03-05T17:31:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:42 Getting list of namespaces
2020/03/05 17:31:42 [2020-03-05T17:31:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:43 [2020-03-05T17:31:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:43 [2020-03-05T17:31:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:47 [2020-03-05T17:31:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:47 Getting list of namespaces
2020/03/05 17:31:47 [2020-03-05T17:31:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:48 [2020-03-05T17:31:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:48 [2020-03-05T17:31:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:52 [2020-03-05T17:31:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:52 Getting list of namespaces
2020/03/05 17:31:52 [2020-03-05T17:31:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:53 [2020-03-05T17:31:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:53 [2020-03-05T17:31:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:57 [2020-03-05T17:31:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:31:57 Getting list of namespaces
2020/03/05 17:31:57 [2020-03-05T17:31:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:31:58 [2020-03-05T17:31:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:31:58 [2020-03-05T17:31:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:02 [2020-03-05T17:32:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:02 Getting list of namespaces
2020/03/05 17:32:02 [2020-03-05T17:32:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:03 [2020-03-05T17:32:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:03 [2020-03-05T17:32:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:07 [2020-03-05T17:32:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:07 Getting list of namespaces
2020/03/05 17:32:07 [2020-03-05T17:32:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:08 [2020-03-05T17:32:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:08 [2020-03-05T17:32:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:12 [2020-03-05T17:32:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:12 Getting list of namespaces
2020/03/05 17:32:12 [2020-03-05T17:32:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:13 [2020-03-05T17:32:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:13 [2020-03-05T17:32:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:17 [2020-03-05T17:32:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:17 Getting list of namespaces
2020/03/05 17:32:17 [2020-03-05T17:32:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:18 [2020-03-05T17:32:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:18 [2020-03-05T17:32:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:22 [2020-03-05T17:32:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:22 Getting list of namespaces
2020/03/05 17:32:22 [2020-03-05T17:32:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:23 [2020-03-05T17:32:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:23 [2020-03-05T17:32:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:27 [2020-03-05T17:32:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:27 Getting list of namespaces
2020/03/05 17:32:27 [2020-03-05T17:32:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:28 [2020-03-05T17:32:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:28 [2020-03-05T17:32:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:32 [2020-03-05T17:32:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:32 Getting list of namespaces
2020/03/05 17:32:32 [2020-03-05T17:32:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:33 [2020-03-05T17:32:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:33 [2020-03-05T17:32:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:37 [2020-03-05T17:32:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:37 Getting list of namespaces
2020/03/05 17:32:37 [2020-03-05T17:32:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:38 [2020-03-05T17:32:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:38 [2020-03-05T17:32:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:42 [2020-03-05T17:32:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:42 Getting list of namespaces
2020/03/05 17:32:42 [2020-03-05T17:32:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:43 [2020-03-05T17:32:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:43 [2020-03-05T17:32:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:47 [2020-03-05T17:32:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:47 Getting list of namespaces
2020/03/05 17:32:47 [2020-03-05T17:32:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:48 [2020-03-05T17:32:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:48 [2020-03-05T17:32:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:52 [2020-03-05T17:32:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:52 Getting list of namespaces
2020/03/05 17:32:52 [2020-03-05T17:32:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:53 [2020-03-05T17:32:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:53 [2020-03-05T17:32:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:57 [2020-03-05T17:32:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:32:57 Getting list of namespaces
2020/03/05 17:32:57 [2020-03-05T17:32:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:32:58 [2020-03-05T17:32:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:32:58 [2020-03-05T17:32:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:02 [2020-03-05T17:33:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:02 Getting list of namespaces
2020/03/05 17:33:02 [2020-03-05T17:33:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:03 [2020-03-05T17:33:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:03 [2020-03-05T17:33:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:07 [2020-03-05T17:33:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:07 Getting list of namespaces
2020/03/05 17:33:07 [2020-03-05T17:33:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:08 [2020-03-05T17:33:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:08 [2020-03-05T17:33:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:14 [2020-03-05T17:33:14Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:14 [2020-03-05T17:33:14Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:14 Getting list of namespaces
2020/03/05 17:33:15 [2020-03-05T17:33:15Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:15 [2020-03-05T17:33:15Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:17 [2020-03-05T17:33:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:17 Getting list of namespaces
2020/03/05 17:33:17 [2020-03-05T17:33:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:18 [2020-03-05T17:33:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:18 [2020-03-05T17:33:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:22 [2020-03-05T17:33:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:22 Getting list of namespaces
2020/03/05 17:33:22 [2020-03-05T17:33:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:23 [2020-03-05T17:33:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:23 [2020-03-05T17:33:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:27 [2020-03-05T17:33:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:27 Getting list of namespaces
2020/03/05 17:33:27 [2020-03-05T17:33:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:28 [2020-03-05T17:33:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:28 [2020-03-05T17:33:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:32 [2020-03-05T17:33:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:32 Getting list of namespaces
2020/03/05 17:33:32 [2020-03-05T17:33:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:33 [2020-03-05T17:33:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:33 [2020-03-05T17:33:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:37 [2020-03-05T17:33:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:37 Getting list of namespaces
2020/03/05 17:33:37 [2020-03-05T17:33:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:38 [2020-03-05T17:33:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:38 [2020-03-05T17:33:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:42 [2020-03-05T17:33:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:42 Getting list of namespaces
2020/03/05 17:33:42 [2020-03-05T17:33:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:43 [2020-03-05T17:33:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:43 [2020-03-05T17:33:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:47 [2020-03-05T17:33:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:47 Getting list of namespaces
2020/03/05 17:33:47 [2020-03-05T17:33:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:48 [2020-03-05T17:33:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:48 [2020-03-05T17:33:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:52 [2020-03-05T17:33:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:52 Getting list of namespaces
2020/03/05 17:33:52 [2020-03-05T17:33:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:53 [2020-03-05T17:33:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:53 [2020-03-05T17:33:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:57 [2020-03-05T17:33:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:33:57 Getting list of namespaces
2020/03/05 17:33:57 [2020-03-05T17:33:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:33:58 [2020-03-05T17:33:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:33:58 [2020-03-05T17:33:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:02 [2020-03-05T17:34:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:02 Getting list of namespaces
2020/03/05 17:34:02 [2020-03-05T17:34:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:03 [2020-03-05T17:34:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:03 [2020-03-05T17:34:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:07 [2020-03-05T17:34:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:07 Getting list of namespaces
2020/03/05 17:34:07 [2020-03-05T17:34:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:08 [2020-03-05T17:34:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:08 [2020-03-05T17:34:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:12 [2020-03-05T17:34:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:12 Getting list of namespaces
2020/03/05 17:34:12 [2020-03-05T17:34:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:13 [2020-03-05T17:34:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:13 [2020-03-05T17:34:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:17 [2020-03-05T17:34:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:17 Getting list of namespaces
2020/03/05 17:34:17 [2020-03-05T17:34:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:18 [2020-03-05T17:34:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:18 [2020-03-05T17:34:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:22 [2020-03-05T17:34:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:22 Getting list of namespaces
2020/03/05 17:34:22 [2020-03-05T17:34:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:23 [2020-03-05T17:34:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:23 [2020-03-05T17:34:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:27 [2020-03-05T17:34:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:27 Getting list of namespaces
2020/03/05 17:34:27 [2020-03-05T17:34:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:28 [2020-03-05T17:34:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:28 [2020-03-05T17:34:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:32 [2020-03-05T17:34:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:32 Getting list of namespaces
2020/03/05 17:34:32 [2020-03-05T17:34:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:33 [2020-03-05T17:34:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:33 [2020-03-05T17:34:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:37 [2020-03-05T17:34:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:37 Getting list of namespaces
2020/03/05 17:34:37 [2020-03-05T17:34:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:38 [2020-03-05T17:34:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:38 [2020-03-05T17:34:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:42 [2020-03-05T17:34:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:42 Getting list of namespaces
2020/03/05 17:34:42 [2020-03-05T17:34:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:43 [2020-03-05T17:34:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:43 [2020-03-05T17:34:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:47 [2020-03-05T17:34:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:47 Getting list of namespaces
2020/03/05 17:34:47 [2020-03-05T17:34:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:48 [2020-03-05T17:34:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:48 [2020-03-05T17:34:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:52 [2020-03-05T17:34:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:52 Getting list of namespaces
2020/03/05 17:34:52 [2020-03-05T17:34:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:53 [2020-03-05T17:34:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:53 [2020-03-05T17:34:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:57 [2020-03-05T17:34:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:34:57 Getting list of namespaces
2020/03/05 17:34:57 [2020-03-05T17:34:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:34:58 [2020-03-05T17:34:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:34:58 [2020-03-05T17:34:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:02 [2020-03-05T17:35:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:02 Getting list of namespaces
2020/03/05 17:35:02 [2020-03-05T17:35:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:03 [2020-03-05T17:35:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:03 [2020-03-05T17:35:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:07 [2020-03-05T17:35:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:07 Getting list of namespaces
2020/03/05 17:35:07 [2020-03-05T17:35:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:08 [2020-03-05T17:35:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:08 [2020-03-05T17:35:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:12 [2020-03-05T17:35:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:12 Getting list of namespaces
2020/03/05 17:35:12 [2020-03-05T17:35:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:13 [2020-03-05T17:35:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:13 [2020-03-05T17:35:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:17 [2020-03-05T17:35:17Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:17 Getting list of namespaces
2020/03/05 17:35:17 [2020-03-05T17:35:17Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:18 [2020-03-05T17:35:18Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:18 [2020-03-05T17:35:18Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:22 [2020-03-05T17:35:22Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:22 Getting list of namespaces
2020/03/05 17:35:22 [2020-03-05T17:35:22Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:23 [2020-03-05T17:35:23Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:23 [2020-03-05T17:35:23Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:27 [2020-03-05T17:35:27Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:27 Getting list of namespaces
2020/03/05 17:35:27 [2020-03-05T17:35:27Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:28 [2020-03-05T17:35:28Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:28 [2020-03-05T17:35:28Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:32 [2020-03-05T17:35:32Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:32 Getting list of namespaces
2020/03/05 17:35:32 [2020-03-05T17:35:32Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:33 [2020-03-05T17:35:33Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:33 [2020-03-05T17:35:33Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:37 [2020-03-05T17:35:37Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:37 Getting list of namespaces
2020/03/05 17:35:37 [2020-03-05T17:35:37Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:38 [2020-03-05T17:35:38Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:38 [2020-03-05T17:35:38Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:42 [2020-03-05T17:35:42Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:42 Getting list of namespaces
2020/03/05 17:35:42 [2020-03-05T17:35:42Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:43 [2020-03-05T17:35:43Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:43 [2020-03-05T17:35:43Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:47 [2020-03-05T17:35:47Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:47 Getting list of namespaces
2020/03/05 17:35:47 [2020-03-05T17:35:47Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:48 [2020-03-05T17:35:48Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:48 [2020-03-05T17:35:48Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:52 [2020-03-05T17:35:52Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:52 Getting list of namespaces
2020/03/05 17:35:52 [2020-03-05T17:35:52Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:53 [2020-03-05T17:35:53Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:53 [2020-03-05T17:35:53Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:57 [2020-03-05T17:35:57Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:35:57 Getting list of namespaces
2020/03/05 17:35:57 [2020-03-05T17:35:57Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:35:58 [2020-03-05T17:35:58Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:35:58 [2020-03-05T17:35:58Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:02 [2020-03-05T17:36:02Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:36:02 Getting list of namespaces
2020/03/05 17:36:02 [2020-03-05T17:36:02Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:03 [2020-03-05T17:36:03Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:36:03 [2020-03-05T17:36:03Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:07 [2020-03-05T17:36:07Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:36:07 Getting list of namespaces
2020/03/05 17:36:07 [2020-03-05T17:36:07Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:08 [2020-03-05T17:36:08Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:36:08 [2020-03-05T17:36:08Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:12 [2020-03-05T17:36:12Z] Incoming HTTP/2.0 GET /api/v1/namespace request from 10.1.75.1:34190: 
2020/03/05 17:36:12 Getting list of namespaces
2020/03/05 17:36:12 [2020-03-05T17:36:12Z] Outcoming response to 10.1.75.1:34190 with 200 status code
2020/03/05 17:36:13 [2020-03-05T17:36:13Z] Incoming HTTP/2.0 GET /api/v1/ingress/default?itemsPerPage=10&page=1&sortBy=d,creationTimestamp request from 10.1.75.1:34190: 
2020/03/05 17:36:13 [2020-03-05T17:36:13Z] Outcoming response to 10.1.75.1:34190 with 200 status code
==== END logs for container kubernetes-dashboard of pod kube-system/kubernetes-dashboard-5bc7684475-ck8cc ====
==== START logs for container influxdb of pod kube-system/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x ====

 8888888           .d888 888                   8888888b.  888888b.
   888            d88P"  888                   888  "Y88b 888  "88b
   888            888    888                   888    888 888  .88P
   888   88888b.  888888 888 888  888 888  888 888    888 8888888K.
   888   888 "88b 888    888 888  888  Y8bd8P' 888    888 888  "Y88b
   888   888  888 888    888 888  888   X88K   888    888 888    888
   888   888  888 888    888 Y88b 888 .d8""8b. 888  .d88P 888   d88P
 8888888 888  888 888    888  "Y88888 888  888 8888888P"  8888888P"

[I] 2020-03-05T17:18:37Z InfluxDB starting, version unknown, branch unknown, commit unknown
[I] 2020-03-05T17:18:37Z Go version go1.8.3, GOMAXPROCS set to 2
[I] 2020-03-05T17:18:37Z Using configuration at: /etc/config.toml
[I] 2020-03-05T17:18:37Z Using data dir: /data/data service=store
[I] 2020-03-05T17:18:37Z opened service service=subscriber
[I] 2020-03-05T17:18:37Z Starting monitor system service=monitor
[I] 2020-03-05T17:18:37Z 'build' registered for diagnostics monitoring service=monitor
[I] 2020-03-05T17:18:37Z 'runtime' registered for diagnostics monitoring service=monitor
[I] 2020-03-05T17:18:37Z 'network' registered for diagnostics monitoring service=monitor
[I] 2020-03-05T17:18:37Z 'system' registered for diagnostics monitoring service=monitor
[I] 2020-03-05T17:18:37Z Starting precreation service with check interval of 10m0s, advance period of 30m0s service=shard-precreation
[I] 2020-03-05T17:18:37Z Starting snapshot service service=snapshot
[I] 2020-03-05T17:18:37Z Starting continuous query service service=continuous_querier
[I] 2020-03-05T17:18:37Z Starting HTTP service service=httpd
[I] 2020-03-05T17:18:37Z Authentication enabled:false service=httpd
[I] 2020-03-05T17:18:37Z Listening on HTTP:[::]:8086 service=httpd
[I] 2020-03-05T17:18:37Z Starting retention policy enforcement service with check interval of 30m0s service=retention
[I] 2020-03-05T17:18:37Z Storing statistics in database '_internal' retention policy 'monitor', at interval 10s service=monitor
[I] 2020-03-05T17:18:37Z Listening for signals
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:00 +0000] "GET /ping HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 67413899-5f05-11ea-8001-000000000000 124
[I] 2020-03-05T17:19:00Z CREATE DATABASE k8s WITH NAME "default" service=query
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:00 +0000] "GET /query?db=&q=CREATE+DATABASE+k8s+WITH+NAME+%22default%22 HTTP/1.1" 200 193 "-" "heapster/v1.5.2" 67414b24-5f05-11ea-8002-000000000000 11210
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 67435614-5f05-11ea-8003-000000000000 22170
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:05 +0000] "GET /ping HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 6a456a35-5f05-11ea-8004-000000000000 20
[I] 2020-03-05T17:19:05Z CREATE DATABASE k8s WITH NAME "default" service=query
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:05 +0000] "GET /query?db=&q=CREATE+DATABASE+k8s+WITH+NAME+%22default%22 HTTP/1.1" 200 193 "-" "heapster/v1.5.2" 6a45777a-5f05-11ea-8005-000000000000 2639
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 6a4695fe-5f05-11ea-8006-000000000000 67395
[httpd] 10.1.75.1 - root [05/Mar/2020:17:19:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 79229639-5f05-11ea-8007-000000000000 62
[httpd] 10.1.75.1 - root [05/Mar/2020:17:20:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 8b043897-5f05-11ea-8008-000000000000 58
[httpd] 10.1.75.1 - root [05/Mar/2020:17:20:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 8e0874bb-5f05-11ea-8009-000000000000 6565
[httpd] 10.1.75.1 - root [05/Mar/2020:17:20:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 9ce5dcd8-5f05-11ea-800a-000000000000 70
[httpd] 10.1.75.1 - root [05/Mar/2020:17:21:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" aec785d8-5f05-11ea-800b-000000000000 58
[httpd] 10.1.75.1 - root [05/Mar/2020:17:21:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" b1cbc530-5f05-11ea-800c-000000000000 5698
[httpd] 10.1.75.1 - root [05/Mar/2020:17:21:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" c0a934d0-5f05-11ea-800d-000000000000 3441
[httpd] 10.1.75.1 - root [05/Mar/2020:17:22:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" d28ac6d7-5f05-11ea-800e-000000000000 60
[httpd] 10.1.75.1 - root [05/Mar/2020:17:22:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" d591f881-5f05-11ea-800f-000000000000 6940
[httpd] 10.1.75.1 - root [05/Mar/2020:17:22:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" e46c6c0e-5f05-11ea-8010-000000000000 60
[httpd] 10.1.75.1 - root [05/Mar/2020:17:23:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" f64e1074-5f05-11ea-8011-000000000000 104
[httpd] 10.1.75.1 - root [05/Mar/2020:17:23:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" f953fd80-5f05-11ea-8012-000000000000 7520
[httpd] 10.1.75.1 - root [05/Mar/2020:17:23:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 082fafc5-5f06-11ea-8013-000000000000 78
[httpd] 10.1.75.1 - root [05/Mar/2020:17:24:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 1a114de9-5f06-11ea-8014-000000000000 77
[httpd] 10.1.75.1 - root [05/Mar/2020:17:24:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 1d1aa300-5f06-11ea-8015-000000000000 5592
[httpd] 10.1.75.1 - root [05/Mar/2020:17:24:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 2bf2fe34-5f06-11ea-8016-000000000000 67
[httpd] 10.1.75.1 - root [05/Mar/2020:17:25:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 3dd49605-5f06-11ea-8017-000000000000 59
[httpd] 10.1.75.1 - root [05/Mar/2020:17:25:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 40d8f6f2-5f06-11ea-8018-000000000000 5634
[httpd] 10.1.75.1 - root [05/Mar/2020:17:25:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 4fb6471a-5f06-11ea-8019-000000000000 72
[httpd] 10.1.75.1 - root [05/Mar/2020:17:26:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 6197ded0-5f06-11ea-801a-000000000000 59
[httpd] 10.1.75.1 - root [05/Mar/2020:17:26:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 649bb286-5f06-11ea-801b-000000000000 6051
[httpd] 10.1.75.1 - root [05/Mar/2020:17:26:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 737980a0-5f06-11ea-801c-000000000000 69
[httpd] 10.1.75.1 - root [05/Mar/2020:17:27:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 855b71cb-5f06-11ea-801d-000000000000 49
[httpd] 10.1.75.1 - root [05/Mar/2020:17:27:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 88632689-5f06-11ea-801e-000000000000 46432
[httpd] 10.1.75.1 - root [05/Mar/2020:17:27:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 973cc639-5f06-11ea-801f-000000000000 75
[httpd] 10.1.75.1 - root [05/Mar/2020:17:28:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" a91e927c-5f06-11ea-8020-000000000000 50
[httpd] 10.1.75.1 - root [05/Mar/2020:17:28:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" ac228bf7-5f06-11ea-8021-000000000000 6455
[httpd] 10.1.75.1 - root [05/Mar/2020:17:28:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" bb000a6e-5f06-11ea-8022-000000000000 55
[httpd] 10.1.75.1 - root [05/Mar/2020:17:29:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" cce1b097-5f06-11ea-8023-000000000000 57
[httpd] 10.1.75.1 - root [05/Mar/2020:17:29:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" cfe4bca7-5f06-11ea-8024-000000000000 5917
[httpd] 10.1.75.1 - root [05/Mar/2020:17:29:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" dec35105-5f06-11ea-8025-000000000000 62
[httpd] 10.1.75.1 - root [05/Mar/2020:17:30:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" f0a5a247-5f06-11ea-8026-000000000000 54
[httpd] 10.1.75.1 - root [05/Mar/2020:17:30:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" f3a8c805-5f06-11ea-8027-000000000000 5258
[httpd] 10.1.75.1 - root [05/Mar/2020:17:30:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 028694ae-5f07-11ea-8028-000000000000 62
[httpd] 10.1.75.1 - root [05/Mar/2020:17:31:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 14683bdb-5f07-11ea-8029-000000000000 60
[httpd] 10.1.75.1 - root [05/Mar/2020:17:31:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 176d889c-5f07-11ea-802a-000000000000 6567
[httpd] 10.1.75.1 - root [05/Mar/2020:17:31:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 2649f601-5f07-11ea-802b-000000000000 78
[httpd] 10.1.75.1 - root [05/Mar/2020:17:32:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 382b7f90-5f07-11ea-802c-000000000000 56
[httpd] 10.1.75.1 - root [05/Mar/2020:17:32:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 3b313b4f-5f07-11ea-802d-000000000000 9790
[httpd] 10.1.75.1 - root [05/Mar/2020:17:32:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 4a0e822a-5f07-11ea-802e-000000000000 9901
[httpd] 10.1.75.1 - root [05/Mar/2020:17:33:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 5befb510-5f07-11ea-802f-000000000000 9778
[httpd] 10.1.75.1 - root [05/Mar/2020:17:33:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 5ef3c80e-5f07-11ea-8030-000000000000 7967
[httpd] 10.1.75.1 - root [05/Mar/2020:17:33:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 6dd06e54-5f07-11ea-8031-000000000000 73
[httpd] 10.1.75.1 - root [05/Mar/2020:17:34:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 7fb209d7-5f07-11ea-8032-000000000000 54
[httpd] 10.1.75.1 - root [05/Mar/2020:17:34:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 82c70ec1-5f07-11ea-8033-000000000000 62815
[httpd] 10.1.75.1 - root [05/Mar/2020:17:34:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" 9196225f-5f07-11ea-8034-000000000000 19947
[httpd] 10.1.75.1 - root [05/Mar/2020:17:35:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" a37922e5-5f07-11ea-8035-000000000000 85
[httpd] 10.1.75.1 - root [05/Mar/2020:17:35:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" a686e658-5f07-11ea-8036-000000000000 10544
[httpd] 10.1.75.1 - root [05/Mar/2020:17:35:30 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" b556f6d1-5f07-11ea-8037-000000000000 60
[httpd] 10.1.75.1 - root [05/Mar/2020:17:36:00 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" c738d2d3-5f07-11ea-8038-000000000000 83
[httpd] 10.1.75.1 - root [05/Mar/2020:17:36:05 +0000] "POST /write?consistency=&db=k8s&precision=&rp=default HTTP/1.1" 204 0 "-" "heapster/v1.5.2" ca558809-5f07-11ea-8039-000000000000 7844
==== END logs for container influxdb of pod kube-system/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x ====
==== START logs for container grafana of pod kube-system/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x ====
Starting a utility program that will configure Grafana
Starting Grafana in foreground mode
Can't access the Grafana dashboard. Error: Get http://admin:admin@localhost:3000/api/org: dial tcp [::1]:3000: getsockopt: connection refused. Retrying after 5 seconds...
t=2020-03-05T17:18:47+0000 lvl=info msg="Starting Grafana" logger=main version=v4.4.3 commit=unknown-dev compiled=2020-03-05T17:18:47+0000
t=2020-03-05T17:18:47+0000 lvl=info msg="Config loaded from" logger=settings file=/usr/share/grafana/conf/defaults.ini
t=2020-03-05T17:18:47+0000 lvl=info msg="Config loaded from" logger=settings file=/etc/grafana/grafana.ini
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from command line" logger=settings arg="default.paths.data=/var/lib/grafana"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from command line" logger=settings arg="default.paths.logs=/var/log/grafana"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from command line" logger=settings arg="default.log.mode=console"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from Environment variable" logger=settings var="GF_SERVER_PROTOCOL=http"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from Environment variable" logger=settings var="GF_SERVER_ROOT_URL=/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy/"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from Environment variable" logger=settings var="GF_AUTH_ANONYMOUS_ENABLED=true"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from Environment variable" logger=settings var="GF_AUTH_ANONYMOUS_ORG_ROLE=Admin"
t=2020-03-05T17:18:47+0000 lvl=info msg="Config overridden from Environment variable" logger=settings var="GF_AUTH_BASIC_ENABLED=false"
t=2020-03-05T17:18:47+0000 lvl=info msg="Path Home" logger=settings path=/usr/share/grafana
t=2020-03-05T17:18:47+0000 lvl=info msg="Path Data" logger=settings path=/var/lib/grafana
t=2020-03-05T17:18:47+0000 lvl=info msg="Path Logs" logger=settings path=/var/log/grafana
t=2020-03-05T17:18:47+0000 lvl=info msg="Path Plugins" logger=settings path=/usr/share/grafana/data/plugins
t=2020-03-05T17:18:47+0000 lvl=info msg="Initializing DB" logger=sqlstore dbtype=sqlite3
t=2020-03-05T17:18:47+0000 lvl=info msg="Starting DB migration" logger=migrator
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create migration_log table"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create user table"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index user.login"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index user.email"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_user_login - v1"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_user_email - v1"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="Rename table user to user_v1 - v1"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create user table v2"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_user_login - v2"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_user_email - v2"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="copy data_source v1 to v2"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table user_v1"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="Add column help_flags1 to user table"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="Update user table charset"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create temp user table v1-7"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_temp_user_email - v1-7"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_temp_user_org_id - v1-7"
t=2020-03-05T17:18:47+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_temp_user_code - v1-7"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_temp_user_status - v1-7"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Update temp_user table charset"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create star table"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index star.user_id_dashboard_id"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create org table v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_org_name - v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create org_user table v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_org_user_org_id - v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_org_user_org_id_user_id - v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="copy data account to org"
t=2020-03-05T17:18:48+0000 lvl=info msg="Skipping migration condition not fulfilled" logger=migrator id="copy data account to org"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="copy data account_user to org_user"
t=2020-03-05T17:18:48+0000 lvl=info msg="Skipping migration condition not fulfilled" logger=migrator id="copy data account_user to org_user"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table account"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table account_user"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Update org table charset"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Update org_user table charset"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard table"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="add index dashboard.account_id"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index dashboard_account_id_slug"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard_tag table"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index dashboard_tag.dasboard_id_term"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_dashboard_tag_dashboard_id_term - v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="Rename table dashboard to dashboard_v1 - v1"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard v2"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_dashboard_org_id - v2"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_dashboard_org_id_slug - v2"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="copy dashboard v1 to v2"
t=2020-03-05T17:18:48+0000 lvl=info msg="Executing migration" logger=migrator id="drop table dashboard_v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="alter dashboard.data to mediumtext v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add column updated_by in dashboard - v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add column created_by in dashboard - v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add column gnetId in dashboard"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add index for gnetId in dashboard"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add column plugin_id in dashboard"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add index for plugin_id in dashboard"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add index for dashboard_id in dashboard_tag"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Update dashboard table charset"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Update dashboard_tag table charset"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="create data_source table"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="add index data_source.account_id"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index data_source.account_id_name"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="drop index IDX_data_source_account_id - v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_data_source_account_id_name - v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Rename table data_source to data_source_v1 - v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="create data_source table v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_data_source_org_id - v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_data_source_org_id_name - v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="copy data_source v1 to v2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table data_source_v1 #2"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add column with_credentials"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Add secure json data column"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="Update data_source table charset"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="create api_key table"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="add index api_key.account_id"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="add index api_key.key"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="add index api_key.account_id_name"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="drop index IDX_api_key_account_id - v1"
t=2020-03-05T17:18:49+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_api_key_key - v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="drop index UQE_api_key_account_id_name - v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Rename table api_key to api_key_v1 - v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create api_key table v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_api_key_org_id - v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_api_key_key - v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_api_key_org_id_name - v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="copy api_key v1 to v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table api_key_v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update api_key table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard_snapshot table v4"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="drop table dashboard_snapshot_v4 #1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard_snapshot table v5 #2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_dashboard_snapshot_key - v5"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_dashboard_snapshot_delete_key - v5"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index IDX_dashboard_snapshot_user_id - v5"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="alter dashboard_snapshot to mediumtext v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update dashboard_snapshot table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create quota table v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_quota_org_id_user_id_target - v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update quota table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create plugin_setting table"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create index UQE_plugin_setting_org_id_plugin_id - v1"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Add column plugin_version to plugin_settings"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update plugin_setting table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create session table"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table playlist table"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old table playlist_item table"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create playlist table v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="create playlist item table v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update playlist table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="Update playlist_item table charset"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="drop preferences table v2"
t=2020-03-05T17:18:50+0000 lvl=info msg="Executing migration" logger=migrator id="drop preferences table v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create preferences table v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Update preferences table charset"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create alert table v1"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index alert org_id & id "
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index alert state"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index alert dashboard_id"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create alert_notification table v1"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Add column is_default"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index alert_notification org_id & name"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Update alert table charset"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Update alert_notification table charset"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Drop old annotation table v4"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create annotation table v5"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index annotation 0 v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index annotation 1 v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index annotation 2 v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index annotation 3 v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index annotation 4 v3"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Update annotation table charset"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Add column region_id to annotation table"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create test_data table"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="create dashboard_version table v1"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add index dashboard_version.dashboard_id"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="add unique index dashboard_version.dashboard_id and dashboard_version.version"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="Set dashboard version to 1 where 0"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="save existing dashboard data in dashboard_version table v1"
t=2020-03-05T17:18:51+0000 lvl=info msg="Executing migration" logger=migrator id="alter dashboard_version.data to mediumtext v1"
t=2020-03-05T17:18:52+0000 lvl=info msg="Created default admin user: admin"
t=2020-03-05T17:18:52+0000 lvl=info msg="Starting plugin search" logger=plugins
Can't access the Grafana dashboard. Error: Get http://admin:admin@localhost:3000/api/org: dial tcp [::1]:3000: getsockopt: connection refused. Retrying after 5 seconds...
t=2020-03-05T17:18:52+0000 lvl=warn msg="Plugin dir does not exist" logger=plugins dir=/usr/share/grafana/data/plugins
t=2020-03-05T17:18:52+0000 lvl=info msg="Plugin dir created" logger=plugins dir=/usr/share/grafana/data/plugins
t=2020-03-05T17:18:52+0000 lvl=info msg="Initializing Alerting" logger=alerting.engine
t=2020-03-05T17:18:52+0000 lvl=info msg="Initializing CleanUpService" logger=cleanup
t=2020-03-05T17:18:52+0000 lvl=info msg="Initializing Stream Manager"
t=2020-03-05T17:18:52+0000 lvl=info msg="Initializing HTTP Server" logger=http.server address=0.0.0.0:3000 protocol=http subUrl=/api/v1/namespaces/kube-system/services/monitoring-grafana/proxy socket=
Connected to the Grafana dashboard.
The datasource for the Grafana dashboard is now set.
==== END logs for container grafana of pod kube-system/monitoring-influxdb-grafana-v4-6d599df6bf-xt29x ====
{
    "kind": "EventList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/events",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f97762f1c0a2f5",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f97762f1c0a2f5",
                "uid": "1f790f78-7de7-4698-948f-f1dd4c48f7d0",
                "resourceVersion": "91",
                "creationTimestamp": "2020-03-05T17:06:50Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "Starting",
            "message": "Starting kube-proxy.",
            "source": {
                "component": "kube-proxy",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:06:50Z",
            "lastTimestamp": "2020-03-05T17:06:50Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f97764484d9b91",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f97764484d9b91",
                "uid": "97dfbd8c-021a-47a7-85a5-8734f3a74782",
                "resourceVersion": "161",
                "creationTimestamp": "2020-03-05T17:06:56Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "718dcade-5c0e-496b-9330-c51bb0aa1d4a"
            },
            "reason": "RegisteredNode",
            "message": "Node ip-172-31-38-5 event: Registered Node ip-172-31-38-5 in Controller",
            "source": {
                "component": "node-controller"
            },
            "firstTimestamp": "2020-03-05T17:06:56Z",
            "lastTimestamp": "2020-03-05T17:06:56Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f97764c6b51980",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f97764c6b51980",
                "uid": "bdf42eeb-d966-4eb6-8541-3b7473ed1b18",
                "resourceVersion": "167",
                "creationTimestamp": "2020-03-05T17:06:58Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeReady",
            "message": "Node ip-172-31-38-5 status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:06:58Z",
            "lastTimestamp": "2020-03-05T17:06:58Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8d6ce35be",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8d6ce35be",
                "uid": "cbf91bff-24e0-4bef-9a38-33a095e38cb5",
                "resourceVersion": "1440",
                "creationTimestamp": "2020-03-05T17:16:25Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "Starting",
            "message": "Starting kubelet.",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:25Z",
            "lastTimestamp": "2020-03-05T17:16:25Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8d943ed71",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8d943ed71",
                "uid": "88fbd87e-04d8-43cc-bc3f-441e488b836f",
                "resourceVersion": "1441",
                "creationTimestamp": "2020-03-05T17:16:25Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "InvalidDiskCapacity",
            "message": "invalid capacity 0 on image filesystem",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:25Z",
            "lastTimestamp": "2020-03-05T17:16:25Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8dfe0b99f",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8dfe0b99f",
                "uid": "e7fbef98-7669-42f6-ab96-5e9ab15ad912",
                "resourceVersion": "1443",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeHasSufficientMemory",
            "message": "Node ip-172-31-38-5 status is now: NodeHasSufficientMemory",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8dfe0e118",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8dfe0e118",
                "uid": "e66fc92f-d610-4e80-8636-481920f1fb1c",
                "resourceVersion": "1444",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeHasNoDiskPressure",
            "message": "Node ip-172-31-38-5 status is now: NodeHasNoDiskPressure",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8dfe0fe30",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8dfe0fe30",
                "uid": "3f66f980-72e9-4a22-865a-3db2d450efa7",
                "resourceVersion": "1445",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeHasSufficientPID",
            "message": "Node ip-172-31-38-5 status is now: NodeHasSufficientPID",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8e1805c36",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8e1805c36",
                "uid": "d7f6c48b-8482-406f-82f1-c073519cbcf5",
                "resourceVersion": "1446",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeNotReady",
            "message": "Node ip-172-31-38-5 status is now: NodeNotReady",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977e8e4d2fec7",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977e8e4d2fec7",
                "uid": "1e00194a-005d-4408-a927-eeca43874a60",
                "resourceVersion": "1449",
                "creationTimestamp": "2020-03-05T17:16:26Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeAllocatableEnforced",
            "message": "Updated Node Allocatable limit across pods",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:26Z",
            "lastTimestamp": "2020-03-05T17:16:26Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "ip-172-31-38-5.15f977eb36347ca3",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/ip-172-31-38-5.15f977eb36347ca3",
                "uid": "7cda7c8c-ea20-4185-a2a7-a3bbac0bf90e",
                "resourceVersion": "1497",
                "creationTimestamp": "2020-03-05T17:16:36Z"
            },
            "involvedObject": {
                "kind": "Node",
                "name": "ip-172-31-38-5",
                "uid": "ip-172-31-38-5"
            },
            "reason": "NodeReady",
            "message": "Node ip-172-31-38-5 status is now: NodeReady",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:16:36Z",
            "lastTimestamp": "2020-03-05T17:16:36Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e21269793b",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e21269793b",
                "uid": "b004bb7a-528c-4e74-a62a-b40ddd27f03a",
                "resourceVersion": "4358",
                "creationTimestamp": "2020-03-05T17:34:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "uid": "71b70c67-3256-4cec-9b64-2ceeacf84d06",
                "apiVersion": "v1",
                "resourceVersion": "4345"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/nginx-ingress-controller-6f4c8f96c7-fjh5g to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:34:16Z",
            "lastTimestamp": "2020-03-05T17:34:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e251ba75d2",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e251ba75d2",
                "uid": "34d25a54-9867-4912-b73c-26f4f72e553a",
                "resourceVersion": "4363",
                "creationTimestamp": "2020-03-05T17:34:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "uid": "71b70c67-3256-4cec-9b64-2ceeacf84d06",
                "apiVersion": "v1",
                "resourceVersion": "4355",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Pulled",
            "message": "Container image \"quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:17Z",
            "lastTimestamp": "2020-03-05T17:34:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e25ce893f5",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e25ce893f5",
                "uid": "ce0d4723-4f68-42d1-a959-ced8a44d9a66",
                "resourceVersion": "4364",
                "creationTimestamp": "2020-03-05T17:34:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "uid": "71b70c67-3256-4cec-9b64-2ceeacf84d06",
                "apiVersion": "v1",
                "resourceVersion": "4355",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Created",
            "message": "Created container nginx-ingress-controller",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:17Z",
            "lastTimestamp": "2020-03-05T17:34:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e27012bc9c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-fjh5g.15f978e27012bc9c",
                "uid": "56c9bc25-5523-44d7-8f3d-2a4d901d1740",
                "resourceVersion": "4369",
                "creationTimestamp": "2020-03-05T17:34:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "uid": "71b70c67-3256-4cec-9b64-2ceeacf84d06",
                "apiVersion": "v1",
                "resourceVersion": "4355",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Started",
            "message": "Started container nginx-ingress-controller",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:17Z",
            "lastTimestamp": "2020-03-05T17:34:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978c72f6c8032",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978c72f6c8032",
                "uid": "8db7b4ee-5a56-4bde-807b-c3c6f5f41abf",
                "resourceVersion": "3981",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3968"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/nginx-ingress-controller-6f4c8f96c7-kdp2b to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978c7a3fd94ef",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978c7a3fd94ef",
                "uid": "bebee621-8e40-4c64-b88f-00d4a3badf2f",
                "resourceVersion": "3989",
                "creationTimestamp": "2020-03-05T17:32:22Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:22Z",
            "lastTimestamp": "2020-03-05T17:32:22Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb0bdd5412",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb0bdd5412",
                "uid": "2a2d85ff-eb8f-4866-91aa-3ae3d1d9794a",
                "resourceVersion": "4028",
                "creationTimestamp": "2020-03-05T17:32:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:37Z",
            "lastTimestamp": "2020-03-05T17:32:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb16d50500",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb16d50500",
                "uid": "5f431d43-816b-4773-8ec8-27bdedab4124",
                "resourceVersion": "4029",
                "creationTimestamp": "2020-03-05T17:32:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Created",
            "message": "Created container nginx-ingress-controller",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:37Z",
            "lastTimestamp": "2020-03-05T17:32:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb23c259c2",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978cb23c259c2",
                "uid": "3849afad-37b8-4eb4-9050-c43044ae0777",
                "resourceVersion": "4030",
                "creationTimestamp": "2020-03-05T17:32:37Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Started",
            "message": "Started container nginx-ingress-controller",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:37Z",
            "lastTimestamp": "2020-03-05T17:32:37Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978de8b7f879a",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978de8b7f879a",
                "uid": "b1e8d764-1970-4c4f-879a-28ab3bf9830e",
                "resourceVersion": "4271",
                "creationTimestamp": "2020-03-05T17:34:01Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Killing",
            "message": "Stopping container nginx-ingress-controller",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:01Z",
            "lastTimestamp": "2020-03-05T17:34:01Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978def597825c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978def597825c",
                "uid": "27b0bdbc-bf23-40b8-b225-85bb5e65123a",
                "resourceVersion": "4306",
                "creationTimestamp": "2020-03-05T17:34:02Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Unhealthy",
            "message": "Readiness probe failed: HTTP probe failed with statuscode: 500",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:02Z",
            "lastTimestamp": "2020-03-05T17:34:12Z",
            "count": 2,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978df939cad9f",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7-kdp2b.15f978df939cad9f",
                "uid": "e5e7292b-098a-482a-98ed-dff6c53db183",
                "resourceVersion": "4290",
                "creationTimestamp": "2020-03-05T17:34:05Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7-kdp2b",
                "uid": "b6d45518-f7dc-4967-b975-eda37d7ed6ed",
                "apiVersion": "v1",
                "resourceVersion": "3980",
                "fieldPath": "spec.containers{nginx-ingress-controller}"
            },
            "reason": "Unhealthy",
            "message": "Liveness probe failed: HTTP probe failed with statuscode: 500",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:05Z",
            "lastTimestamp": "2020-03-05T17:34:05Z",
            "count": 1,
            "type": "Warning",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7.15f978c7239e02a0",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7.15f978c7239e02a0",
                "uid": "c849d9c2-a926-4248-bcc1-ff5bd5d518bf",
                "resourceVersion": "3971",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7",
                "uid": "3adf0350-c616-400e-b1a0-52b0b119803e",
                "apiVersion": "apps/v1",
                "resourceVersion": "3961"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: nginx-ingress-controller-6f4c8f96c7-kdp2b",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7.15f978e1fe749140",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller-6f4c8f96c7.15f978e1fe749140",
                "uid": "7506dc32-e725-4cb2-ba4b-276620b1955a",
                "resourceVersion": "4347",
                "creationTimestamp": "2020-03-05T17:34:16Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "nginx-ingress-controller-6f4c8f96c7",
                "uid": "3b5156b6-54a8-4c46-a7d8-ab1cf5831a5c",
                "apiVersion": "apps/v1",
                "resourceVersion": "4337"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: nginx-ingress-controller-6f4c8f96c7-fjh5g",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:34:16Z",
            "lastTimestamp": "2020-03-05T17:34:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller.15f978c71b904523",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller.15f978c71b904523",
                "uid": "857510a6-262f-425e-8181-2ea8f2fa759d",
                "resourceVersion": "3965",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "nginx-ingress-controller",
                "uid": "d2ac27ae-a9f4-4ca1-bbd9-3393e8242af0",
                "apiVersion": "apps/v1",
                "resourceVersion": "3959"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set nginx-ingress-controller-6f4c8f96c7 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller.15f978e1ee1c0327",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-controller.15f978e1ee1c0327",
                "uid": "d3e417fa-fa47-4c71-9f29-9bcbc7e16338",
                "resourceVersion": "4341",
                "creationTimestamp": "2020-03-05T17:34:15Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "nginx-ingress-controller",
                "uid": "edf5c41c-220d-420b-8024-990b2a615b5c",
                "apiVersion": "apps/v1",
                "resourceVersion": "4331"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set nginx-ingress-controller-6f4c8f96c7 to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:34:15Z",
            "lastTimestamp": "2020-03-05T17:34:15Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978c72fcd8ac8",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978c72fcd8ac8",
                "uid": "9d1fbb1c-85ea-4204-b6e8-11d6627f4991",
                "resourceVersion": "3982",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3967"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/nginx-ingress-default-backend-659bd647bd-mnlmg to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978c7c444ab25",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978c7c444ab25",
                "uid": "67a48a48-1e04-46bd-928f-8d89fc3319ba",
                "resourceVersion": "3994",
                "creationTimestamp": "2020-03-05T17:32:23Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3979",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Pulling",
            "message": "Pulling image \"k8s.gcr.io/defaultbackend-amd64:1.5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:23Z",
            "lastTimestamp": "2020-03-05T17:32:23Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb4f1e1c29",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb4f1e1c29",
                "uid": "d172cea2-7e3d-4ec6-a64c-5ec732e2e21f",
                "resourceVersion": "4033",
                "creationTimestamp": "2020-03-05T17:32:38Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3979",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Pulled",
            "message": "Successfully pulled image \"k8s.gcr.io/defaultbackend-amd64:1.5\"",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:38Z",
            "lastTimestamp": "2020-03-05T17:32:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb57ee032e",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb57ee032e",
                "uid": "e1d8849f-f506-4acd-a01b-7c59bcc432b5",
                "resourceVersion": "4034",
                "creationTimestamp": "2020-03-05T17:32:38Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3979",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Created",
            "message": "Created container nginx-ingress-default-backend",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:38Z",
            "lastTimestamp": "2020-03-05T17:32:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb6275424c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978cb6275424c",
                "uid": "e8a161c2-1f6c-40be-b7c2-10a3118ed662",
                "resourceVersion": "4035",
                "creationTimestamp": "2020-03-05T17:32:38Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3979",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Started",
            "message": "Started container nginx-ingress-default-backend",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:32:38Z",
            "lastTimestamp": "2020-03-05T17:32:38Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg.15f978de8a91a7de",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-mnlmg.15f978de8a91a7de",
                "uid": "8052f670-ef71-447e-828c-c7aa19bfa11d",
                "resourceVersion": "4270",
                "creationTimestamp": "2020-03-05T17:34:01Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-mnlmg",
                "uid": "2fce83bf-32fb-49e7-bd3e-8f92324ef1f0",
                "apiVersion": "v1",
                "resourceVersion": "3979",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Killing",
            "message": "Stopping container nginx-ingress-default-backend",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:01Z",
            "lastTimestamp": "2020-03-05T17:34:01Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms.15f978e213ec9337",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-xgxms.15f978e213ec9337",
                "uid": "6f52c027-2af5-4f0e-a7aa-531cf57e44b5",
                "resourceVersion": "4359",
                "creationTimestamp": "2020-03-05T17:34:16Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms",
                "uid": "b02134f3-044a-46b0-ad68-5f4d76528288",
                "apiVersion": "v1",
                "resourceVersion": "4346"
            },
            "reason": "Scheduled",
            "message": "Successfully assigned default/nginx-ingress-default-backend-659bd647bd-xgxms to ip-172-31-38-5",
            "source": {
                "component": "default-scheduler"
            },
            "firstTimestamp": "2020-03-05T17:34:16Z",
            "lastTimestamp": "2020-03-05T17:34:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms.15f978e261f65a6e",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-xgxms.15f978e261f65a6e",
                "uid": "b62d0d4a-4b87-41c0-847f-e987993db3dd",
                "resourceVersion": "4366",
                "creationTimestamp": "2020-03-05T17:34:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms",
                "uid": "b02134f3-044a-46b0-ad68-5f4d76528288",
                "apiVersion": "v1",
                "resourceVersion": "4356",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Pulled",
            "message": "Container image \"k8s.gcr.io/defaultbackend-amd64:1.5\" already present on machine",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:17Z",
            "lastTimestamp": "2020-03-05T17:34:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms.15f978e26874ce9c",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-xgxms.15f978e26874ce9c",
                "uid": "5c263e59-787a-4a36-8225-14c3f2569b15",
                "resourceVersion": "4368",
                "creationTimestamp": "2020-03-05T17:34:17Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms",
                "uid": "b02134f3-044a-46b0-ad68-5f4d76528288",
                "apiVersion": "v1",
                "resourceVersion": "4356",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Created",
            "message": "Created container nginx-ingress-default-backend",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:17Z",
            "lastTimestamp": "2020-03-05T17:34:17Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms.15f978e27cee6378",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd-xgxms.15f978e27cee6378",
                "uid": "1bf07c56-6c64-4f47-a17d-e0effcf45357",
                "resourceVersion": "4373",
                "creationTimestamp": "2020-03-05T17:34:18Z"
            },
            "involvedObject": {
                "kind": "Pod",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms",
                "uid": "b02134f3-044a-46b0-ad68-5f4d76528288",
                "apiVersion": "v1",
                "resourceVersion": "4356",
                "fieldPath": "spec.containers{nginx-ingress-default-backend}"
            },
            "reason": "Started",
            "message": "Started container nginx-ingress-default-backend",
            "source": {
                "component": "kubelet",
                "host": "ip-172-31-38-5"
            },
            "firstTimestamp": "2020-03-05T17:34:18Z",
            "lastTimestamp": "2020-03-05T17:34:18Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd.15f978c7239e01cc",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd.15f978c7239e01cc",
                "uid": "f5dca479-1b70-4b32-a488-65fbcf22c99a",
                "resourceVersion": "3975",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd",
                "uid": "7a4ac3b4-3ab4-405e-ad4d-cc2c73b1964d",
                "apiVersion": "apps/v1",
                "resourceVersion": "3962"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: nginx-ingress-default-backend-659bd647bd-mnlmg",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd.15f978e1fe778d89",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend-659bd647bd.15f978e1fe778d89",
                "uid": "6997548f-743e-4ff9-bf7f-44fbdd5d852e",
                "resourceVersion": "4350",
                "creationTimestamp": "2020-03-05T17:34:16Z"
            },
            "involvedObject": {
                "kind": "ReplicaSet",
                "namespace": "default",
                "name": "nginx-ingress-default-backend-659bd647bd",
                "uid": "236ce339-837b-4f76-bb05-ae22e1637a15",
                "apiVersion": "apps/v1",
                "resourceVersion": "4335"
            },
            "reason": "SuccessfulCreate",
            "message": "Created pod: nginx-ingress-default-backend-659bd647bd-xgxms",
            "source": {
                "component": "replicaset-controller"
            },
            "firstTimestamp": "2020-03-05T17:34:16Z",
            "lastTimestamp": "2020-03-05T17:34:16Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend.15f978c71b93187f",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend.15f978c71b93187f",
                "uid": "346ec0d5-53f1-442d-bdc8-266090c3aad2",
                "resourceVersion": "3966",
                "creationTimestamp": "2020-03-05T17:32:20Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "nginx-ingress-default-backend",
                "uid": "ab64b596-9072-4b65-97b7-43a000314187",
                "apiVersion": "apps/v1",
                "resourceVersion": "3956"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set nginx-ingress-default-backend-659bd647bd to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:32:20Z",
            "lastTimestamp": "2020-03-05T17:32:20Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend.15f978e1efeefeea",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/events/nginx-ingress-default-backend.15f978e1efeefeea",
                "uid": "dc804386-ee2e-42c1-bdcc-4e0c209a8552",
                "resourceVersion": "4342",
                "creationTimestamp": "2020-03-05T17:34:15Z"
            },
            "involvedObject": {
                "kind": "Deployment",
                "namespace": "default",
                "name": "nginx-ingress-default-backend",
                "uid": "0ff3fa23-b636-4100-af05-7df9e7f832f7",
                "apiVersion": "apps/v1",
                "resourceVersion": "4330"
            },
            "reason": "ScalingReplicaSet",
            "message": "Scaled up replica set nginx-ingress-default-backend-659bd647bd to 1",
            "source": {
                "component": "deployment-controller"
            },
            "firstTimestamp": "2020-03-05T17:34:15Z",
            "lastTimestamp": "2020-03-05T17:34:15Z",
            "count": 1,
            "type": "Normal",
            "eventTime": null,
            "reportingComponent": "",
            "reportingInstance": ""
        }
    ]
}
{
    "kind": "ReplicationControllerList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/replicationcontrollers",
        "resourceVersion": "4664"
    },
    "items": []
}
{
    "kind": "ServiceList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/services",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "kubernetes",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/kubernetes",
                "uid": "eb04baa8-796f-4903-8975-1d278cc9cd44",
                "resourceVersion": "57",
                "creationTimestamp": "2020-03-05T17:06:49Z",
                "labels": {
                    "component": "apiserver",
                    "provider": "kubernetes"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": 16443
                    }
                ],
                "clusterIP": "10.152.183.1",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "nginx-ingress-controller",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/nginx-ingress-controller",
                "uid": "97ce06cd-a631-453e-b381-9b017fe90d0f",
                "resourceVersion": "4328",
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "chart": "nginx-ingress-1.33.2",
                    "component": "controller",
                    "heritage": "Helm",
                    "release": "nginx-ingress"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "http",
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": "http",
                        "nodePort": 30140
                    },
                    {
                        "name": "https",
                        "protocol": "TCP",
                        "port": 443,
                        "targetPort": "https",
                        "nodePort": 32316
                    }
                ],
                "selector": {
                    "app": "nginx-ingress",
                    "component": "controller",
                    "release": "nginx-ingress"
                },
                "clusterIP": "10.152.183.227",
                "type": "LoadBalancer",
                "sessionAffinity": "None",
                "externalTrafficPolicy": "Cluster"
            },
            "status": {
                "loadBalancer": {}
            }
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/services/nginx-ingress-default-backend",
                "uid": "33ed7896-4cd6-422e-bfe6-6efc16f40462",
                "resourceVersion": "4322",
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "chart": "nginx-ingress-1.33.2",
                    "component": "default-backend",
                    "heritage": "Helm",
                    "release": "nginx-ingress"
                }
            },
            "spec": {
                "ports": [
                    {
                        "name": "http",
                        "protocol": "TCP",
                        "port": 80,
                        "targetPort": "http"
                    }
                ],
                "selector": {
                    "app": "nginx-ingress",
                    "component": "default-backend",
                    "release": "nginx-ingress"
                },
                "clusterIP": "10.152.183.155",
                "type": "ClusterIP",
                "sessionAffinity": "None"
            },
            "status": {
                "loadBalancer": {}
            }
        }
    ]
}
{
    "kind": "DaemonSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/daemonsets",
        "resourceVersion": "4664"
    },
    "items": []
}
{
    "kind": "DeploymentList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/deployments",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "nginx-ingress-controller",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/deployments/nginx-ingress-controller",
                "uid": "edf5c41c-220d-420b-8024-990b2a615b5c",
                "resourceVersion": "4424",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "chart": "nginx-ingress-1.33.2",
                    "component": "controller",
                    "heritage": "Helm",
                    "release": "nginx-ingress"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "nginx-ingress",
                        "release": "nginx-ingress"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "nginx-ingress",
                            "component": "controller",
                            "release": "nginx-ingress"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "nginx-ingress-controller",
                                "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0",
                                "args": [
                                    "/nginx-ingress-controller",
                                    "--default-backend-service=default/nginx-ingress-default-backend",
                                    "--publish-service=default/nginx-ingress-controller",
                                    "--election-id=ingress-controller-leader",
                                    "--ingress-class=nginx",
                                    "--configmap=default/nginx-ingress-controller"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 80,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "https",
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 10254,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 10254,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "runAsUser": 101,
                                    "allowPrivilegeEscalation": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 60,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "nginx-ingress",
                        "serviceAccount": "nginx-ingress",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:34:35Z",
                        "lastTransitionTime": "2020-03-05T17:34:35Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:34:35Z",
                        "lastTransitionTime": "2020-03-05T17:34:15Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"nginx-ingress-controller-6f4c8f96c7\" has successfully progressed."
                    }
                ]
            }
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/deployments/nginx-ingress-default-backend",
                "uid": "0ff3fa23-b636-4100-af05-7df9e7f832f7",
                "resourceVersion": "4383",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "chart": "nginx-ingress-1.33.2",
                    "component": "default-backend",
                    "heritage": "Helm",
                    "release": "nginx-ingress"
                },
                "annotations": {
                    "deployment.kubernetes.io/revision": "1"
                }
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "nginx-ingress",
                        "release": "nginx-ingress"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "nginx-ingress",
                            "component": "default-backend",
                            "release": "nginx-ingress"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "nginx-ingress-default-backend",
                                "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "failureThreshold": 6
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 65534
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 60,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "nginx-ingress-backend",
                        "serviceAccount": "nginx-ingress-backend",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                },
                "strategy": {
                    "type": "RollingUpdate",
                    "rollingUpdate": {
                        "maxUnavailable": "25%",
                        "maxSurge": "25%"
                    }
                },
                "revisionHistoryLimit": 10,
                "progressDeadlineSeconds": 600
            },
            "status": {
                "observedGeneration": 1,
                "replicas": 1,
                "updatedReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "conditions": [
                    {
                        "type": "Available",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:34:18Z",
                        "lastTransitionTime": "2020-03-05T17:34:18Z",
                        "reason": "MinimumReplicasAvailable",
                        "message": "Deployment has minimum availability."
                    },
                    {
                        "type": "Progressing",
                        "status": "True",
                        "lastUpdateTime": "2020-03-05T17:34:18Z",
                        "lastTransitionTime": "2020-03-05T17:34:15Z",
                        "reason": "NewReplicaSetAvailable",
                        "message": "ReplicaSet \"nginx-ingress-default-backend-659bd647bd\" has successfully progressed."
                    }
                ]
            }
        }
    ]
}
{
    "kind": "ReplicaSetList",
    "apiVersion": "apps/v1",
    "metadata": {
        "selfLink": "/apis/apps/v1/namespaces/default/replicasets",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/replicasets/nginx-ingress-controller-6f4c8f96c7",
                "uid": "3b5156b6-54a8-4c46-a7d8-ab1cf5831a5c",
                "resourceVersion": "4422",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "component": "controller",
                    "pod-template-hash": "6f4c8f96c7",
                    "release": "nginx-ingress"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "nginx-ingress-controller",
                        "uid": "edf5c41c-220d-420b-8024-990b2a615b5c",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "nginx-ingress",
                        "pod-template-hash": "6f4c8f96c7",
                        "release": "nginx-ingress"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "nginx-ingress",
                            "component": "controller",
                            "pod-template-hash": "6f4c8f96c7",
                            "release": "nginx-ingress"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "nginx-ingress-controller",
                                "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0",
                                "args": [
                                    "/nginx-ingress-controller",
                                    "--default-backend-service=default/nginx-ingress-default-backend",
                                    "--publish-service=default/nginx-ingress-controller",
                                    "--election-id=ingress-controller-leader",
                                    "--ingress-class=nginx",
                                    "--configmap=default/nginx-ingress-controller"
                                ],
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 80,
                                        "protocol": "TCP"
                                    },
                                    {
                                        "name": "https",
                                        "containerPort": 443,
                                        "protocol": "TCP"
                                    }
                                ],
                                "env": [
                                    {
                                        "name": "POD_NAME",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.name"
                                            }
                                        }
                                    },
                                    {
                                        "name": "POD_NAMESPACE",
                                        "valueFrom": {
                                            "fieldRef": {
                                                "apiVersion": "v1",
                                                "fieldPath": "metadata.namespace"
                                            }
                                        }
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 10254,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 10254,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 10,
                                    "timeoutSeconds": 1,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "capabilities": {
                                        "add": [
                                            "NET_BIND_SERVICE"
                                        ],
                                        "drop": [
                                            "ALL"
                                        ]
                                    },
                                    "runAsUser": 101,
                                    "allowPrivilegeEscalation": true
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 60,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "nginx-ingress",
                        "serviceAccount": "nginx-ingress",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd",
                "namespace": "default",
                "selfLink": "/apis/apps/v1/namespaces/default/replicasets/nginx-ingress-default-backend-659bd647bd",
                "uid": "236ce339-837b-4f76-bb05-ae22e1637a15",
                "resourceVersion": "4382",
                "generation": 1,
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "component": "default-backend",
                    "pod-template-hash": "659bd647bd",
                    "release": "nginx-ingress"
                },
                "annotations": {
                    "deployment.kubernetes.io/desired-replicas": "1",
                    "deployment.kubernetes.io/max-replicas": "2",
                    "deployment.kubernetes.io/revision": "1"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "name": "nginx-ingress-default-backend",
                        "uid": "0ff3fa23-b636-4100-af05-7df9e7f832f7",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "replicas": 1,
                "selector": {
                    "matchLabels": {
                        "app": "nginx-ingress",
                        "pod-template-hash": "659bd647bd",
                        "release": "nginx-ingress"
                    }
                },
                "template": {
                    "metadata": {
                        "creationTimestamp": null,
                        "labels": {
                            "app": "nginx-ingress",
                            "component": "default-backend",
                            "pod-template-hash": "659bd647bd",
                            "release": "nginx-ingress"
                        }
                    },
                    "spec": {
                        "containers": [
                            {
                                "name": "nginx-ingress-default-backend",
                                "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                                "ports": [
                                    {
                                        "name": "http",
                                        "containerPort": 8080,
                                        "protocol": "TCP"
                                    }
                                ],
                                "resources": {},
                                "livenessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "initialDelaySeconds": 30,
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 10,
                                    "successThreshold": 1,
                                    "failureThreshold": 3
                                },
                                "readinessProbe": {
                                    "httpGet": {
                                        "path": "/healthz",
                                        "port": 8080,
                                        "scheme": "HTTP"
                                    },
                                    "timeoutSeconds": 5,
                                    "periodSeconds": 5,
                                    "successThreshold": 1,
                                    "failureThreshold": 6
                                },
                                "terminationMessagePath": "/dev/termination-log",
                                "terminationMessagePolicy": "File",
                                "imagePullPolicy": "IfNotPresent",
                                "securityContext": {
                                    "runAsUser": 65534
                                }
                            }
                        ],
                        "restartPolicy": "Always",
                        "terminationGracePeriodSeconds": 60,
                        "dnsPolicy": "ClusterFirst",
                        "serviceAccountName": "nginx-ingress-backend",
                        "serviceAccount": "nginx-ingress-backend",
                        "securityContext": {},
                        "schedulerName": "default-scheduler"
                    }
                }
            },
            "status": {
                "replicas": 1,
                "fullyLabeledReplicas": 1,
                "readyReplicas": 1,
                "availableReplicas": 1,
                "observedGeneration": 1
            }
        }
    ]
}
{
    "kind": "PodList",
    "apiVersion": "v1",
    "metadata": {
        "selfLink": "/api/v1/namespaces/default/pods",
        "resourceVersion": "4664"
    },
    "items": [
        {
            "metadata": {
                "name": "nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "generateName": "nginx-ingress-controller-6f4c8f96c7-",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/pods/nginx-ingress-controller-6f4c8f96c7-fjh5g",
                "uid": "71b70c67-3256-4cec-9b64-2ceeacf84d06",
                "resourceVersion": "4421",
                "creationTimestamp": "2020-03-05T17:34:16Z",
                "labels": {
                    "app": "nginx-ingress",
                    "component": "controller",
                    "pod-template-hash": "6f4c8f96c7",
                    "release": "nginx-ingress"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "nginx-ingress-controller-6f4c8f96c7",
                        "uid": "3b5156b6-54a8-4c46-a7d8-ab1cf5831a5c",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "nginx-ingress-token-w58j2",
                        "secret": {
                            "secretName": "nginx-ingress-token-w58j2",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "nginx-ingress-controller",
                        "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0",
                        "args": [
                            "/nginx-ingress-controller",
                            "--default-backend-service=default/nginx-ingress-default-backend",
                            "--publish-service=default/nginx-ingress-controller",
                            "--election-id=ingress-controller-leader",
                            "--ingress-class=nginx",
                            "--configmap=default/nginx-ingress-controller"
                        ],
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 80,
                                "protocol": "TCP"
                            },
                            {
                                "name": "https",
                                "containerPort": 443,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "POD_NAME",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.name"
                                    }
                                }
                            },
                            {
                                "name": "POD_NAMESPACE",
                                "valueFrom": {
                                    "fieldRef": {
                                        "apiVersion": "v1",
                                        "fieldPath": "metadata.namespace"
                                    }
                                }
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "nginx-ingress-token-w58j2",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10254,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 10254,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 10,
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "capabilities": {
                                "add": [
                                    "NET_BIND_SERVICE"
                                ],
                                "drop": [
                                    "ALL"
                                ]
                            },
                            "runAsUser": 101,
                            "allowPrivilegeEscalation": true
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 60,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "nginx-ingress",
                "serviceAccount": "nginx-ingress",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:16Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:35Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:35Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:16Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.11",
                "podIPs": [
                    {
                        "ip": "10.1.75.11"
                    }
                ],
                "startTime": "2020-03-05T17:34:16Z",
                "containerStatuses": [
                    {
                        "name": "nginx-ingress-controller",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:34:17Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.30.0",
                        "imageID": "quay.io/kubernetes-ingress-controller/nginx-ingress-controller@sha256:b312c91d0de688a21075078982b5e3a48b13b46eda4df743317d3059fc3ca0d9",
                        "containerID": "containerd://48c924f5f317320512cf56492714eff307a38a544c7b7c61e8b81411f73472a0",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        },
        {
            "metadata": {
                "name": "nginx-ingress-default-backend-659bd647bd-xgxms",
                "generateName": "nginx-ingress-default-backend-659bd647bd-",
                "namespace": "default",
                "selfLink": "/api/v1/namespaces/default/pods/nginx-ingress-default-backend-659bd647bd-xgxms",
                "uid": "b02134f3-044a-46b0-ad68-5f4d76528288",
                "resourceVersion": "4380",
                "creationTimestamp": "2020-03-05T17:34:15Z",
                "labels": {
                    "app": "nginx-ingress",
                    "component": "default-backend",
                    "pod-template-hash": "659bd647bd",
                    "release": "nginx-ingress"
                },
                "ownerReferences": [
                    {
                        "apiVersion": "apps/v1",
                        "kind": "ReplicaSet",
                        "name": "nginx-ingress-default-backend-659bd647bd",
                        "uid": "236ce339-837b-4f76-bb05-ae22e1637a15",
                        "controller": true,
                        "blockOwnerDeletion": true
                    }
                ]
            },
            "spec": {
                "volumes": [
                    {
                        "name": "nginx-ingress-backend-token-xrt8z",
                        "secret": {
                            "secretName": "nginx-ingress-backend-token-xrt8z",
                            "defaultMode": 420
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "nginx-ingress-default-backend",
                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                        "ports": [
                            {
                                "name": "http",
                                "containerPort": 8080,
                                "protocol": "TCP"
                            }
                        ],
                        "resources": {},
                        "volumeMounts": [
                            {
                                "name": "nginx-ingress-backend-token-xrt8z",
                                "readOnly": true,
                                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
                            }
                        ],
                        "livenessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "initialDelaySeconds": 30,
                            "timeoutSeconds": 5,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/healthz",
                                "port": 8080,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 5,
                            "periodSeconds": 5,
                            "successThreshold": 1,
                            "failureThreshold": 6
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "terminationMessagePolicy": "File",
                        "imagePullPolicy": "IfNotPresent",
                        "securityContext": {
                            "runAsUser": 65534
                        }
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 60,
                "dnsPolicy": "ClusterFirst",
                "serviceAccountName": "nginx-ingress-backend",
                "serviceAccount": "nginx-ingress-backend",
                "nodeName": "ip-172-31-38-5",
                "securityContext": {},
                "schedulerName": "default-scheduler",
                "tolerations": [
                    {
                        "key": "node.kubernetes.io/not-ready",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    },
                    {
                        "key": "node.kubernetes.io/unreachable",
                        "operator": "Exists",
                        "effect": "NoExecute",
                        "tolerationSeconds": 300
                    }
                ],
                "priority": 0,
                "enableServiceLinks": true
            },
            "status": {
                "phase": "Running",
                "conditions": [
                    {
                        "type": "Initialized",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:16Z"
                    },
                    {
                        "type": "Ready",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:18Z"
                    },
                    {
                        "type": "ContainersReady",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:18Z"
                    },
                    {
                        "type": "PodScheduled",
                        "status": "True",
                        "lastProbeTime": null,
                        "lastTransitionTime": "2020-03-05T17:34:16Z"
                    }
                ],
                "hostIP": "172.31.38.5",
                "podIP": "10.1.75.12",
                "podIPs": [
                    {
                        "ip": "10.1.75.12"
                    }
                ],
                "startTime": "2020-03-05T17:34:16Z",
                "containerStatuses": [
                    {
                        "name": "nginx-ingress-default-backend",
                        "state": {
                            "running": {
                                "startedAt": "2020-03-05T17:34:18Z"
                            }
                        },
                        "lastState": {},
                        "ready": true,
                        "restartCount": 0,
                        "image": "k8s.gcr.io/defaultbackend-amd64:1.5",
                        "imageID": "k8s.gcr.io/defaultbackend-amd64@sha256:4dc5e07c8ca4e23bddb3153737d7b8c556e5fb2f29c4558b7cd6e6df99c512c7",
                        "containerID": "containerd://784f9f4d6a94e46549605cbf68221ba7627d4400db7af23fadfec6d7073f8e34",
                        "started": true
                    }
                ],
                "qosClass": "BestEffort"
            }
        }
    ]
}
==== START logs for container nginx-ingress-controller of pod default/nginx-ingress-controller-6f4c8f96c7-fjh5g ====
-------------------------------------------------------------------------------
NGINX Ingress controller
  Release:       0.30.0
  Build:         git-7e65b90c4
  Repository:    https://github.com/kubernetes/ingress-nginx
  nginx version: nginx/1.17.8

-------------------------------------------------------------------------------

I0305 17:34:17.943099       6 flags.go:215] Watching for Ingress class: nginx
W0305 17:34:17.943692       6 flags.go:260] SSL certificate chain completion is disabled (--enable-ssl-chain-completion=false)
W0305 17:34:17.944862       6 client_config.go:543] Neither --kubeconfig nor --master was specified.  Using the inClusterConfig.  This might not work.
I0305 17:34:17.945109       6 main.go:193] Creating API client for https://10.152.183.1:443
I0305 17:34:17.972676       6 main.go:237] Running in Kubernetes cluster version v1.17 (v1.17.3) - git (clean) commit 06ad960bfd03b39c8310aaf92d1e7c12ce618213 - platform linux/amd64
I0305 17:34:17.994683       6 main.go:91] Validated default/nginx-ingress-default-backend as the default backend.
I0305 17:34:18.336571       6 main.go:102] SSL fake certificate created /etc/ingress-controller/ssl/default-fake-certificate.pem
W0305 17:34:18.362331       6 store.go:628] Unexpected error reading configuration configmap: configmaps "nginx-ingress-controller" not found
I0305 17:34:18.376033       6 nginx.go:263] Starting NGINX Ingress controller
I0305 17:34:19.576721       6 nginx.go:307] Starting NGINX process
I0305 17:34:19.577069       6 leaderelection.go:242] attempting to acquire leader lease  default/ingress-controller-leader-nginx...
I0305 17:34:19.577374       6 controller.go:137] Configuration changes detected, backend reload required.
I0305 17:34:19.581098       6 status.go:86] new leader elected: nginx-ingress-controller-6f4c8f96c7-kdp2b
I0305 17:34:19.750920       6 controller.go:153] Backend successfully reloaded.
I0305 17:34:19.750958       6 controller.go:162] Initial sync, sleeping for 1 second.
I0305 17:34:54.571652       6 leaderelection.go:252] successfully acquired lease default/ingress-controller-leader-nginx
I0305 17:34:54.571299       6 status.go:86] new leader elected: nginx-ingress-controller-6f4c8f96c7-fjh5g
==== END logs for container nginx-ingress-controller of pod default/nginx-ingress-controller-6f4c8f96c7-fjh5g ====
==== START logs for container nginx-ingress-default-backend of pod default/nginx-ingress-default-backend-659bd647bd-xgxms ====
==== END logs for container nginx-ingress-default-backend of pod default/nginx-ingress-default-backend-659bd647bd-xgxms ====
Cluster info dumped to standard output
